import "./chunk-OROXOI2D.js";

// node_modules/gridstack/dist/utils.js
function obsolete(self, f, oldName, newName, rev) {
  let wrapper = (...args) => {
    console.warn("gridstack.js: Function `" + oldName + "` is deprecated in " + rev + " and has been replaced with `" + newName + "`. It will be **removed** in a future release");
    return f.apply(self, args);
  };
  wrapper.prototype = f.prototype;
  return wrapper;
}
function obsoleteOpts(opts, oldName, newName, rev) {
  if (opts[oldName] !== void 0) {
    opts[newName] = opts[oldName];
    console.warn("gridstack.js: Option `" + oldName + "` is deprecated in " + rev + " and has been replaced with `" + newName + "`. It will be **removed** in a future release");
  }
}
function obsoleteOptsDel(opts, oldName, rev, info) {
  if (opts[oldName] !== void 0) {
    console.warn("gridstack.js: Option `" + oldName + "` is deprecated in " + rev + info);
  }
}
function obsoleteAttr(el, oldName, newName, rev) {
  let oldAttr = el.getAttribute(oldName);
  if (oldAttr !== null) {
    el.setAttribute(newName, oldAttr);
    console.warn("gridstack.js: attribute `" + oldName + "`=" + oldAttr + " is deprecated on this object in " + rev + " and has been replaced with `" + newName + "`. It will be **removed** in a future release");
  }
}
var Utils = class {
  static getElements(els, root = document) {
    if (typeof els === "string") {
      const doc = "getElementById" in root ? root : void 0;
      if (doc && !isNaN(+els[0])) {
        const el = doc.getElementById(els);
        return el ? [el] : [];
      }
      let list = root.querySelectorAll(els);
      if (!list.length && els[0] !== "." && els[0] !== "#") {
        list = root.querySelectorAll("." + els);
        if (!list.length) {
          list = root.querySelectorAll("#" + els);
        }
      }
      return Array.from(list);
    }
    return [els];
  }
  static getElement(els, root = document) {
    if (typeof els === "string") {
      const doc = "getElementById" in root ? root : void 0;
      if (!els.length)
        return null;
      if (doc && els[0] === "#") {
        return doc.getElementById(els.substring(1));
      }
      if (els[0] === "#" || els[0] === "." || els[0] === "[") {
        return root.querySelector(els);
      }
      if (doc && !isNaN(+els[0])) {
        return doc.getElementById(els);
      }
      let el = root.querySelector(els);
      if (doc && !el) {
        el = doc.getElementById(els);
      }
      if (!el) {
        el = root.querySelector("." + els);
      }
      return el;
    }
    return els;
  }
  static shouldFitToContent(n) {
    return (n == null ? void 0 : n.grid) && (n.fitToContent || n.grid.opts.fitToContent && n.fitToContent !== false);
  }
  static isIntercepted(a, b) {
    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);
  }
  static isTouching(a, b) {
    return Utils.isIntercepted(a, { x: b.x - 0.5, y: b.y - 0.5, w: b.w + 1, h: b.h + 1 });
  }
  static areaIntercept(a, b) {
    let x0 = a.x > b.x ? a.x : b.x;
    let x1 = a.x + a.w < b.x + b.w ? a.x + a.w : b.x + b.w;
    if (x1 <= x0)
      return 0;
    let y0 = a.y > b.y ? a.y : b.y;
    let y1 = a.y + a.h < b.y + b.h ? a.y + a.h : b.y + b.h;
    if (y1 <= y0)
      return 0;
    return (x1 - x0) * (y1 - y0);
  }
  static area(a) {
    return a.w * a.h;
  }
  static sort(nodes, dir = 1, column) {
    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;
    if (dir === -1)
      return nodes.sort((a, b) => {
        var _a, _b, _c, _d;
        return ((_a = b.x) != null ? _a : 1e3) + ((_b = b.y) != null ? _b : 1e3) * column - (((_c = a.x) != null ? _c : 1e3) + ((_d = a.y) != null ? _d : 1e3) * column);
      });
    else
      return nodes.sort((b, a) => {
        var _a, _b, _c, _d;
        return ((_a = b.x) != null ? _a : 1e3) + ((_b = b.y) != null ? _b : 1e3) * column - (((_c = a.x) != null ? _c : 1e3) + ((_d = a.y) != null ? _d : 1e3) * column);
      });
  }
  static createStylesheet(id, parent, options) {
    let style = document.createElement("style");
    const nonce = options == null ? void 0 : options.nonce;
    if (nonce)
      style.nonce = nonce;
    style.setAttribute("type", "text/css");
    style.setAttribute("gs-style-id", id);
    if (style.styleSheet) {
      style.styleSheet.cssText = "";
    } else {
      style.appendChild(document.createTextNode(""));
    }
    if (!parent) {
      parent = document.getElementsByTagName("head")[0];
      parent.appendChild(style);
    } else {
      parent.insertBefore(style, parent.firstChild);
    }
    return style.sheet;
  }
  static removeStylesheet(id) {
    let el = document.querySelector("STYLE[gs-style-id=" + id + "]");
    if (el && el.parentNode)
      el.remove();
  }
  static addCSSRule(sheet, selector, rules) {
    if (typeof sheet.addRule === "function") {
      sheet.addRule(selector, rules);
    } else if (typeof sheet.insertRule === "function") {
      sheet.insertRule(`${selector}{${rules}}`);
    }
  }
  static toBool(v) {
    if (typeof v === "boolean") {
      return v;
    }
    if (typeof v === "string") {
      v = v.toLowerCase();
      return !(v === "" || v === "no" || v === "false" || v === "0");
    }
    return Boolean(v);
  }
  static toNumber(value) {
    return value === null || value.length === 0 ? void 0 : Number(value);
  }
  static parseHeight(val) {
    let h;
    let unit = "px";
    if (typeof val === "string") {
      let match = val.match(/^(-[0-9]+\.[0-9]+|[0-9]*\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);
      if (!match) {
        throw new Error("Invalid height");
      }
      unit = match[2] || "px";
      h = parseFloat(match[1]);
    } else {
      h = val;
    }
    return { h, unit };
  }
  static defaults(target, ...sources) {
    sources.forEach((source) => {
      for (const key in source) {
        if (!source.hasOwnProperty(key))
          return;
        if (target[key] === null || target[key] === void 0) {
          target[key] = source[key];
        } else if (typeof source[key] === "object" && typeof target[key] === "object") {
          this.defaults(target[key], source[key]);
        }
      }
    });
    return target;
  }
  static same(a, b) {
    if (typeof a !== "object")
      return a == b;
    if (typeof a !== typeof b)
      return false;
    if (Object.keys(a).length !== Object.keys(b).length)
      return false;
    for (const key in a) {
      if (a[key] !== b[key])
        return false;
    }
    return true;
  }
  static copyPos(a, b, doMinMax = false) {
    if (b.x !== void 0)
      a.x = b.x;
    if (b.y !== void 0)
      a.y = b.y;
    if (b.w !== void 0)
      a.w = b.w;
    if (b.h !== void 0)
      a.h = b.h;
    if (doMinMax) {
      if (b.minW)
        a.minW = b.minW;
      if (b.minH)
        a.minH = b.minH;
      if (b.maxW)
        a.maxW = b.maxW;
      if (b.maxH)
        a.maxH = b.maxH;
    }
    return a;
  }
  static samePos(a, b) {
    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;
  }
  static sanitizeMinMax(node) {
    if (!node.minW) {
      delete node.minW;
    }
    if (!node.minH) {
      delete node.minH;
    }
    if (!node.maxW) {
      delete node.maxW;
    }
    if (!node.maxH) {
      delete node.maxH;
    }
  }
  static removeInternalAndSame(a, b) {
    if (typeof a !== "object" || typeof b !== "object")
      return;
    for (let key in a) {
      let val = a[key];
      if (key[0] === "_" || val === b[key]) {
        delete a[key];
      } else if (val && typeof val === "object" && b[key] !== void 0) {
        for (let i in val) {
          if (val[i] === b[key][i] || i[0] === "_") {
            delete val[i];
          }
        }
        if (!Object.keys(val).length) {
          delete a[key];
        }
      }
    }
  }
  static removeInternalForSave(n, removeEl = true) {
    for (let key in n) {
      if (key[0] === "_" || n[key] === null || n[key] === void 0)
        delete n[key];
    }
    delete n.grid;
    if (removeEl)
      delete n.el;
    if (!n.autoPosition)
      delete n.autoPosition;
    if (!n.noResize)
      delete n.noResize;
    if (!n.noMove)
      delete n.noMove;
    if (!n.locked)
      delete n.locked;
    if (n.w === 1 || n.w === n.minW)
      delete n.w;
    if (n.h === 1 || n.h === n.minH)
      delete n.h;
  }
  static closestUpByClass(el, name) {
    while (el) {
      if (el.classList.contains(name))
        return el;
      el = el.parentElement;
    }
    return null;
  }
  static throttle(func, delay) {
    let isWaiting = false;
    return (...args) => {
      if (!isWaiting) {
        isWaiting = true;
        setTimeout(() => {
          func(...args);
          isWaiting = false;
        }, delay);
      }
    };
  }
  static removePositioningStyles(el) {
    let style = el.style;
    if (style.position) {
      style.removeProperty("position");
    }
    if (style.left) {
      style.removeProperty("left");
    }
    if (style.top) {
      style.removeProperty("top");
    }
    if (style.width) {
      style.removeProperty("width");
    }
    if (style.height) {
      style.removeProperty("height");
    }
  }
  static getScrollElement(el) {
    if (!el)
      return document.scrollingElement || document.documentElement;
    const style = getComputedStyle(el);
    const overflowRegex = /(auto|scroll)/;
    if (overflowRegex.test(style.overflow + style.overflowY)) {
      return el;
    } else {
      return this.getScrollElement(el.parentElement);
    }
  }
  static updateScrollPosition(el, position, distance) {
    let rect = el.getBoundingClientRect();
    let innerHeightOrClientHeight = window.innerHeight || document.documentElement.clientHeight;
    if (rect.top < 0 || rect.bottom > innerHeightOrClientHeight) {
      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;
      let offsetDiffUp = rect.top;
      let scrollEl = this.getScrollElement(el);
      if (scrollEl !== null) {
        let prevScroll = scrollEl.scrollTop;
        if (rect.top < 0 && distance < 0) {
          if (el.offsetHeight > innerHeightOrClientHeight) {
            scrollEl.scrollTop += distance;
          } else {
            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;
          }
        } else if (distance > 0) {
          if (el.offsetHeight > innerHeightOrClientHeight) {
            scrollEl.scrollTop += distance;
          } else {
            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;
          }
        }
        position.top += scrollEl.scrollTop - prevScroll;
      }
    }
  }
  static updateScrollResize(event, el, distance) {
    const scrollEl = this.getScrollElement(el);
    const height = scrollEl.clientHeight;
    const offsetTop = scrollEl === this.getScrollElement() ? 0 : scrollEl.getBoundingClientRect().top;
    const pointerPosY = event.clientY - offsetTop;
    const top = pointerPosY < distance;
    const bottom = pointerPosY > height - distance;
    if (top) {
      scrollEl.scrollBy({ behavior: "smooth", top: pointerPosY - distance });
    } else if (bottom) {
      scrollEl.scrollBy({ behavior: "smooth", top: distance - (height - pointerPosY) });
    }
  }
  static clone(obj) {
    if (obj === null || obj === void 0 || typeof obj !== "object") {
      return obj;
    }
    if (obj instanceof Array) {
      return [...obj];
    }
    return { ...obj };
  }
  static cloneDeep(obj) {
    const skipFields = ["parentGrid", "el", "grid", "subGrid", "engine"];
    const ret = Utils.clone(obj);
    for (const key in ret) {
      if (ret.hasOwnProperty(key) && typeof ret[key] === "object" && key.substring(0, 2) !== "__" && !skipFields.find((k) => k === key)) {
        ret[key] = Utils.cloneDeep(obj[key]);
      }
    }
    return ret;
  }
  static cloneNode(el) {
    const node = el.cloneNode(true);
    node.removeAttribute("id");
    return node;
  }
  static appendTo(el, parent) {
    let parentNode;
    if (typeof parent === "string") {
      parentNode = Utils.getElement(parent);
    } else {
      parentNode = parent;
    }
    if (parentNode) {
      parentNode.appendChild(el);
    }
  }
  static addElStyles(el, styles) {
    if (styles instanceof Object) {
      for (const s in styles) {
        if (styles.hasOwnProperty(s)) {
          if (Array.isArray(styles[s])) {
            styles[s].forEach((val) => {
              el.style[s] = val;
            });
          } else {
            el.style[s] = styles[s];
          }
        }
      }
    }
  }
  static initEvent(e, info) {
    const evt = { type: info.type };
    const obj = {
      button: 0,
      which: 0,
      buttons: 1,
      bubbles: true,
      cancelable: true,
      target: info.target ? info.target : e.target
    };
    if (e.dataTransfer) {
      evt["dataTransfer"] = e.dataTransfer;
    }
    ["altKey", "ctrlKey", "metaKey", "shiftKey"].forEach((p) => evt[p] = e[p]);
    ["pageX", "pageY", "clientX", "clientY", "screenX", "screenY"].forEach((p) => evt[p] = e[p]);
    return { ...evt, ...obj };
  }
  static simulateMouseEvent(e, simulatedType, target) {
    const simulatedEvent = document.createEvent("MouseEvents");
    simulatedEvent.initMouseEvent(
      simulatedType,
      true,
      true,
      window,
      1,
      e.screenX,
      e.screenY,
      e.clientX,
      e.clientY,
      e.ctrlKey,
      e.altKey,
      e.shiftKey,
      e.metaKey,
      0,
      e.target
    );
    (target || e.target).dispatchEvent(simulatedEvent);
  }
};

// node_modules/gridstack/dist/gridstack-engine.js
var GridStackEngine = class {
  constructor(opts = {}) {
    this.addedNodes = [];
    this.removedNodes = [];
    this.column = opts.column || 12;
    this.maxRow = opts.maxRow;
    this._float = opts.float;
    this.nodes = opts.nodes || [];
    this.onChange = opts.onChange;
  }
  batchUpdate(flag = true, doPack = true) {
    if (!!this.batchMode === flag)
      return this;
    this.batchMode = flag;
    if (flag) {
      this._prevFloat = this._float;
      this._float = true;
      this.cleanNodes();
      this.saveInitial();
    } else {
      this._float = this._prevFloat;
      delete this._prevFloat;
      if (doPack)
        this._packNodes();
      this._notify();
    }
    return this;
  }
  _useEntireRowArea(node, nn) {
    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);
  }
  _fixCollisions(node, nn = node, collide, opt = {}) {
    this.sortNodes(-1);
    collide = collide || this.collide(node, nn);
    if (!collide)
      return false;
    if (node._moving && !opt.nested && !this.float) {
      if (this.swap(node, collide))
        return true;
    }
    let area = nn;
    if (this._useEntireRowArea(node, nn)) {
      area = { x: 0, w: this.column, y: nn.y, h: nn.h };
      collide = this.collide(node, area, opt.skip);
    }
    let didMove = false;
    let newOpt = { nested: true, pack: false };
    while (collide = collide || this.collide(node, area, opt.skip)) {
      let moved;
      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float && (!this.collide(collide, { ...collide, y: node.y }, node) || !this.collide(collide, { ...collide, y: nn.y - collide.h }, node))) {
        node._skipDown = node._skipDown || nn.y > node.y;
        moved = this.moveNode(node, { ...nn, y: collide.y + collide.h, ...newOpt });
        if (collide.locked && moved) {
          Utils.copyPos(nn, node);
        } else if (!collide.locked && moved && opt.pack) {
          this._packNodes();
          nn.y = collide.y + collide.h;
          Utils.copyPos(node, nn);
        }
        didMove = didMove || moved;
      } else {
        moved = this.moveNode(collide, { ...collide, y: nn.y + nn.h, skip: node, ...newOpt });
      }
      if (!moved) {
        return didMove;
      }
      collide = void 0;
    }
    return didMove;
  }
  collide(skip, area = skip, skip2) {
    const skipId = skip._id;
    const skip2Id = skip2 == null ? void 0 : skip2._id;
    return this.nodes.find((n) => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));
  }
  collideAll(skip, area = skip, skip2) {
    const skipId = skip._id;
    const skip2Id = skip2 == null ? void 0 : skip2._id;
    return this.nodes.filter((n) => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));
  }
  directionCollideCoverage(node, o, collides) {
    if (!o.rect || !node._rect)
      return;
    let r0 = node._rect;
    let r = { ...o.rect };
    if (r.y > r0.y) {
      r.h += r.y - r0.y;
      r.y = r0.y;
    } else {
      r.h += r0.y - r.y;
    }
    if (r.x > r0.x) {
      r.w += r.x - r0.x;
      r.x = r0.x;
    } else {
      r.w += r0.x - r.x;
    }
    let collide;
    collides.forEach((n) => {
      if (n.locked || !n._rect)
        return;
      let r2 = n._rect;
      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5;
      if (r0.y < r2.y) {
        yOver = (r.y + r.h - r2.y) / r2.h;
      } else if (r0.y + r0.h > r2.y + r2.h) {
        yOver = (r2.y + r2.h - r.y) / r2.h;
      }
      if (r0.x < r2.x) {
        xOver = (r.x + r.w - r2.x) / r2.w;
      } else if (r0.x + r0.w > r2.x + r2.w) {
        xOver = (r2.x + r2.w - r.x) / r2.w;
      }
      let over = Math.min(xOver, yOver);
      if (over > overMax) {
        overMax = over;
        collide = n;
      }
    });
    o.collide = collide;
    return collide;
  }
  cacheRects(w, h, top, right, bottom, left) {
    this.nodes.forEach((n) => n._rect = {
      y: n.y * h + top,
      x: n.x * w + left,
      w: n.w * w - left - right,
      h: n.h * h - top - bottom
    });
    return this;
  }
  swap(a, b) {
    if (!b || b.locked || !a || a.locked)
      return false;
    function _doSwap() {
      let x = b.x, y = b.y;
      b.x = a.x;
      b.y = a.y;
      if (a.h != b.h) {
        a.x = x;
        a.y = b.y + b.h;
      } else if (a.w != b.w) {
        a.x = b.x + b.w;
        a.y = y;
      } else {
        a.x = x;
        a.y = y;
      }
      a._dirty = b._dirty = true;
      return true;
    }
    let touching;
    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))
      return _doSwap();
    if (touching === false)
      return;
    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {
      if (b.y < a.y) {
        let t = a;
        a = b;
        b = t;
      }
      return _doSwap();
    }
    if (touching === false)
      return;
    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {
      if (b.x < a.x) {
        let t = a;
        a = b;
        b = t;
      }
      return _doSwap();
    }
    return false;
  }
  isAreaEmpty(x, y, w, h) {
    let nn = { x: x || 0, y: y || 0, w: w || 1, h: h || 1 };
    return !this.collide(nn);
  }
  compact(layout = "compact", doSort = true) {
    if (this.nodes.length === 0)
      return this;
    if (doSort)
      this.sortNodes();
    const wasBatch = this.batchMode;
    if (!wasBatch)
      this.batchUpdate();
    const wasColumnResize = this._inColumnResize;
    if (!wasColumnResize)
      this._inColumnResize = true;
    let copyNodes = this.nodes;
    this.nodes = [];
    copyNodes.forEach((n, index, list) => {
      let after;
      if (!n.locked) {
        n.autoPosition = true;
        if (layout === "list" && index)
          after = list[index - 1];
      }
      this.addNode(n, false, after);
    });
    if (!wasColumnResize)
      delete this._inColumnResize;
    if (!wasBatch)
      this.batchUpdate(false);
    return this;
  }
  set float(val) {
    if (this._float === val)
      return;
    this._float = val || false;
    if (!val) {
      this._packNodes()._notify();
    }
  }
  get float() {
    return this._float || false;
  }
  sortNodes(dir = 1, column = this.column) {
    this.nodes = Utils.sort(this.nodes, dir, column);
    return this;
  }
  _packNodes() {
    if (this.batchMode) {
      return this;
    }
    this.sortNodes();
    if (this.float) {
      this.nodes.forEach((n) => {
        if (n._updating || n._orig === void 0 || n.y === n._orig.y)
          return;
        let newY = n.y;
        while (newY > n._orig.y) {
          --newY;
          let collide = this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });
          if (!collide) {
            n._dirty = true;
            n.y = newY;
          }
        }
      });
    } else {
      this.nodes.forEach((n, i) => {
        if (n.locked)
          return;
        while (n.y > 0) {
          let newY = i === 0 ? 0 : n.y - 1;
          let canBeMoved = i === 0 || !this.collide(n, { x: n.x, y: newY, w: n.w, h: n.h });
          if (!canBeMoved)
            break;
          n._dirty = n.y !== newY;
          n.y = newY;
        }
      });
    }
    return this;
  }
  prepareNode(node, resizing) {
    var _a;
    node = node || {};
    node._id = (_a = node._id) != null ? _a : GridStackEngine._idSeq++;
    if (node.x === void 0 || node.y === void 0 || node.x === null || node.y === null) {
      node.autoPosition = true;
    }
    let defaults = { x: 0, y: 0, w: 1, h: 1 };
    Utils.defaults(node, defaults);
    if (!node.autoPosition) {
      delete node.autoPosition;
    }
    if (!node.noResize) {
      delete node.noResize;
    }
    if (!node.noMove) {
      delete node.noMove;
    }
    Utils.sanitizeMinMax(node);
    if (typeof node.x == "string") {
      node.x = Number(node.x);
    }
    if (typeof node.y == "string") {
      node.y = Number(node.y);
    }
    if (typeof node.w == "string") {
      node.w = Number(node.w);
    }
    if (typeof node.h == "string") {
      node.h = Number(node.h);
    }
    if (isNaN(node.x)) {
      node.x = defaults.x;
      node.autoPosition = true;
    }
    if (isNaN(node.y)) {
      node.y = defaults.y;
      node.autoPosition = true;
    }
    if (isNaN(node.w)) {
      node.w = defaults.w;
    }
    if (isNaN(node.h)) {
      node.h = defaults.h;
    }
    return this.nodeBoundFix(node, resizing);
  }
  nodeBoundFix(node, resizing) {
    let before = node._orig || Utils.copyPos({}, node);
    if (node.maxW) {
      node.w = Math.min(node.w, node.maxW);
    }
    if (node.maxH) {
      node.h = Math.min(node.h, node.maxH);
    }
    if (node.minW && node.minW <= this.column) {
      node.w = Math.max(node.w, node.minW);
    }
    if (node.minH) {
      node.h = Math.max(node.h, node.minH);
    }
    const saveOrig = (node.x || 0) + (node.w || 1) > this.column;
    if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {
      let copy = { ...node };
      if (copy.autoPosition) {
        delete copy.x;
        delete copy.y;
      } else
        copy.x = Math.min(11, copy.x);
      copy.w = Math.min(12, copy.w);
      this.cacheOneLayout(copy, 12);
    }
    if (node.w > this.column) {
      node.w = this.column;
    } else if (node.w < 1) {
      node.w = 1;
    }
    if (this.maxRow && node.h > this.maxRow) {
      node.h = this.maxRow;
    } else if (node.h < 1) {
      node.h = 1;
    }
    if (node.x < 0) {
      node.x = 0;
    }
    if (node.y < 0) {
      node.y = 0;
    }
    if (node.x + node.w > this.column) {
      if (resizing) {
        node.w = this.column - node.x;
      } else {
        node.x = this.column - node.w;
      }
    }
    if (this.maxRow && node.y + node.h > this.maxRow) {
      if (resizing) {
        node.h = this.maxRow - node.y;
      } else {
        node.y = this.maxRow - node.h;
      }
    }
    if (!Utils.samePos(node, before)) {
      node._dirty = true;
    }
    return node;
  }
  getDirtyNodes(verify) {
    if (verify) {
      return this.nodes.filter((n) => n._dirty && !Utils.samePos(n, n._orig));
    }
    return this.nodes.filter((n) => n._dirty);
  }
  _notify(removedNodes) {
    if (this.batchMode || !this.onChange)
      return this;
    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());
    this.onChange(dirtyNodes);
    return this;
  }
  cleanNodes() {
    if (this.batchMode)
      return this;
    this.nodes.forEach((n) => {
      delete n._dirty;
      delete n._lastTried;
    });
    return this;
  }
  saveInitial() {
    this.nodes.forEach((n) => {
      n._orig = Utils.copyPos({}, n);
      delete n._dirty;
    });
    this._hasLocked = this.nodes.some((n) => n.locked);
    return this;
  }
  restoreInitial() {
    this.nodes.forEach((n) => {
      if (Utils.samePos(n, n._orig))
        return;
      Utils.copyPos(n, n._orig);
      n._dirty = true;
    });
    this._notify();
    return this;
  }
  findEmptyPosition(node, nodeList = this.nodes, column = this.column, after) {
    let start = after ? after.y * column + (after.x + after.w) : 0;
    let found = false;
    for (let i = start; !found; ++i) {
      let x = i % column;
      let y = Math.floor(i / column);
      if (x + node.w > column) {
        continue;
      }
      let box = { x, y, w: node.w, h: node.h };
      if (!nodeList.find((n) => Utils.isIntercepted(box, n))) {
        if (node.x !== x || node.y !== y)
          node._dirty = true;
        node.x = x;
        node.y = y;
        delete node.autoPosition;
        found = true;
      }
    }
    return found;
  }
  addNode(node, triggerAddEvent = false, after) {
    let dup = this.nodes.find((n) => n._id === node._id);
    if (dup)
      return dup;
    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);
    delete node._temporaryRemoved;
    delete node._removeDOM;
    let skipCollision;
    if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {
      delete node.autoPosition;
      skipCollision = true;
    }
    this.nodes.push(node);
    if (triggerAddEvent) {
      this.addedNodes.push(node);
    }
    if (!skipCollision)
      this._fixCollisions(node);
    if (!this.batchMode) {
      this._packNodes()._notify();
    }
    return node;
  }
  removeNode(node, removeDOM = true, triggerEvent = false) {
    if (!this.nodes.find((n) => n._id === node._id)) {
      return this;
    }
    if (triggerEvent) {
      this.removedNodes.push(node);
    }
    if (removeDOM)
      node._removeDOM = true;
    this.nodes = this.nodes.filter((n) => n._id !== node._id);
    if (!node._isAboutToRemove)
      this._packNodes();
    this._notify([node]);
    return this;
  }
  removeAll(removeDOM = true) {
    delete this._layouts;
    if (!this.nodes.length)
      return this;
    removeDOM && this.nodes.forEach((n) => n._removeDOM = true);
    this.removedNodes = this.nodes;
    this.nodes = [];
    return this._notify(this.removedNodes);
  }
  moveNodeCheck(node, o) {
    if (!this.changedPosConstrain(node, o))
      return false;
    o.pack = true;
    if (!this.maxRow) {
      return this.moveNode(node, o);
    }
    let clonedNode;
    let clone = new GridStackEngine({
      column: this.column,
      float: this.float,
      nodes: this.nodes.map((n) => {
        if (n._id === node._id) {
          clonedNode = { ...n };
          return clonedNode;
        }
        return { ...n };
      })
    });
    if (!clonedNode)
      return false;
    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;
    if (!canMove && !o.resizing && o.collide) {
      let collide = o.collide.el.gridstackNode;
      if (this.swap(node, collide)) {
        this._notify();
        return true;
      }
    }
    if (!canMove)
      return false;
    clone.nodes.filter((n) => n._dirty).forEach((c) => {
      let n = this.nodes.find((a) => a._id === c._id);
      if (!n)
        return;
      Utils.copyPos(n, c);
      n._dirty = true;
    });
    this._notify();
    return true;
  }
  willItFit(node) {
    delete node._willFitPos;
    if (!this.maxRow)
      return true;
    let clone = new GridStackEngine({
      column: this.column,
      float: this.float,
      nodes: this.nodes.map((n2) => {
        return { ...n2 };
      })
    });
    let n = { ...node };
    this.cleanupNode(n);
    delete n.el;
    delete n._id;
    delete n.content;
    delete n.grid;
    clone.addNode(n);
    if (clone.getRow() <= this.maxRow) {
      node._willFitPos = Utils.copyPos({}, n);
      return true;
    }
    return false;
  }
  changedPosConstrain(node, p) {
    p.w = p.w || node.w;
    p.h = p.h || node.h;
    if (node.x !== p.x || node.y !== p.y)
      return true;
    if (node.maxW) {
      p.w = Math.min(p.w, node.maxW);
    }
    if (node.maxH) {
      p.h = Math.min(p.h, node.maxH);
    }
    if (node.minW) {
      p.w = Math.max(p.w, node.minW);
    }
    if (node.minH) {
      p.h = Math.max(p.h, node.minH);
    }
    return node.w !== p.w || node.h !== p.h;
  }
  moveNode(node, o) {
    var _a, _b;
    if (!node || !o)
      return false;
    let wasUndefinedPack;
    if (o.pack === void 0) {
      wasUndefinedPack = o.pack = true;
    }
    if (typeof o.x !== "number") {
      o.x = node.x;
    }
    if (typeof o.y !== "number") {
      o.y = node.y;
    }
    if (typeof o.w !== "number") {
      o.w = node.w;
    }
    if (typeof o.h !== "number") {
      o.h = node.h;
    }
    let resizing = node.w !== o.w || node.h !== o.h;
    let nn = Utils.copyPos({}, node, true);
    Utils.copyPos(nn, o);
    nn = this.nodeBoundFix(nn, resizing);
    Utils.copyPos(o, nn);
    if (Utils.samePos(node, o))
      return false;
    let prevPos = Utils.copyPos({}, node);
    let collides = this.collideAll(node, nn, o.skip);
    let needToMove = true;
    if (collides.length) {
      let activeDrag = node._moving && !o.nested;
      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];
      if (activeDrag && collide && ((_b = (_a = node.grid) == null ? void 0 : _a.opts) == null ? void 0 : _b.subGridDynamic) && !node.grid._isTemp) {
        let over = Utils.areaIntercept(o.rect, collide._rect);
        let a1 = Utils.area(o.rect);
        let a2 = Utils.area(collide._rect);
        let perc = over / (a1 < a2 ? a1 : a2);
        if (perc > 0.8) {
          collide.grid.makeSubGrid(collide.el, void 0, node);
          collide = void 0;
        }
      }
      if (collide) {
        needToMove = !this._fixCollisions(node, nn, collide, o);
      } else {
        needToMove = false;
        if (wasUndefinedPack)
          delete o.pack;
      }
    }
    if (needToMove) {
      node._dirty = true;
      Utils.copyPos(node, nn);
    }
    if (o.pack) {
      this._packNodes()._notify();
    }
    return !Utils.samePos(node, prevPos);
  }
  getRow() {
    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);
  }
  beginUpdate(node) {
    if (!node._updating) {
      node._updating = true;
      delete node._skipDown;
      if (!this.batchMode)
        this.saveInitial();
    }
    return this;
  }
  endUpdate() {
    let n = this.nodes.find((n2) => n2._updating);
    if (n) {
      delete n._updating;
      delete n._skipDown;
    }
    return this;
  }
  save(saveElement = true, saveCB) {
    var _a;
    let len = (_a = this._layouts) == null ? void 0 : _a.length;
    let layout = len && this.column !== len - 1 ? this._layouts[len - 1] : null;
    let list = [];
    this.sortNodes();
    this.nodes.forEach((n) => {
      let wl = layout == null ? void 0 : layout.find((l) => l._id === n._id);
      let w = { ...n };
      if (wl) {
        w.x = wl.x;
        w.y = wl.y;
        w.w = wl.w;
      }
      Utils.removeInternalForSave(w, !saveElement);
      if (saveCB)
        saveCB(n, w);
      list.push(w);
    });
    return list;
  }
  layoutsNodesChange(nodes) {
    if (!this._layouts || this._inColumnResize)
      return this;
    this._layouts.forEach((layout, column) => {
      if (!layout || column === this.column)
        return this;
      if (column < this.column) {
        this._layouts[column] = void 0;
      } else {
        let ratio = column / this.column;
        nodes.forEach((node) => {
          if (!node._orig)
            return;
          let n = layout.find((l) => l._id === node._id);
          if (!n)
            return;
          if (n.y >= 0 && node.y !== node._orig.y) {
            n.y += node.y - node._orig.y;
          }
          if (node.x !== node._orig.x) {
            n.x = Math.round(node.x * ratio);
          }
          if (node.w !== node._orig.w) {
            n.w = Math.round(node.w * ratio);
          }
        });
      }
    });
    return this;
  }
  columnChanged(prevColumn, column, nodes, layout = "moveScale") {
    var _a;
    if (!this.nodes.length || !column || prevColumn === column)
      return this;
    const doCompact = layout === "compact" || layout === "list";
    if (doCompact) {
      this.sortNodes(1, prevColumn);
    }
    if (column < prevColumn)
      this.cacheLayout(this.nodes, prevColumn);
    this.batchUpdate();
    let newNodes = [];
    let domOrder = false;
    if (column === 1 && (nodes == null ? void 0 : nodes.length)) {
      domOrder = true;
      let top = 0;
      nodes.forEach((n) => {
        n.x = 0;
        n.w = 1;
        n.y = Math.max(n.y, top);
        top = n.y + n.h;
      });
      newNodes = nodes;
      nodes = [];
    } else {
      nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1, prevColumn);
    }
    if (column > prevColumn && this._layouts) {
      const cacheNodes = this._layouts[column] || [];
      let lastIndex = this._layouts.length - 1;
      if (!cacheNodes.length && prevColumn !== lastIndex && ((_a = this._layouts[lastIndex]) == null ? void 0 : _a.length)) {
        prevColumn = lastIndex;
        this._layouts[lastIndex].forEach((cacheNode) => {
          var _a2, _b, _c;
          let n = nodes.find((n2) => n2._id === cacheNode._id);
          if (n) {
            if (!doCompact && !cacheNode.autoPosition) {
              n.x = (_a2 = cacheNode.x) != null ? _a2 : n.x;
              n.y = (_b = cacheNode.y) != null ? _b : n.y;
            }
            n.w = (_c = cacheNode.w) != null ? _c : n.w;
            if (cacheNode.x == void 0 || cacheNode.y === void 0)
              n.autoPosition = true;
          }
        });
      }
      cacheNodes.forEach((cacheNode) => {
        var _a2, _b, _c;
        let j = nodes.findIndex((n) => n._id === cacheNode._id);
        if (j !== -1) {
          const n = nodes[j];
          if (doCompact) {
            n.w = cacheNode.w;
            return;
          }
          if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {
            this.findEmptyPosition(cacheNode, newNodes);
          }
          if (!cacheNode.autoPosition) {
            n.x = (_a2 = cacheNode.x) != null ? _a2 : n.x;
            n.y = (_b = cacheNode.y) != null ? _b : n.y;
            n.w = (_c = cacheNode.w) != null ? _c : n.w;
            newNodes.push(n);
          }
          nodes.splice(j, 1);
        }
      });
    }
    if (doCompact) {
      this.compact(layout, false);
    } else {
      if (nodes.length) {
        if (typeof layout === "function") {
          layout(column, prevColumn, newNodes, nodes);
        } else if (!domOrder) {
          let ratio = doCompact || layout === "none" ? 1 : column / prevColumn;
          let move = layout === "move" || layout === "moveScale";
          let scale = layout === "scale" || layout === "moveScale";
          nodes.forEach((node) => {
            node.x = column === 1 ? 0 : move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1);
            node.w = column === 1 || prevColumn === 1 ? 1 : scale ? Math.round(node.w * ratio) || 1 : Math.min(node.w, column);
            newNodes.push(node);
          });
          nodes = [];
        }
      }
      if (!domOrder)
        newNodes = Utils.sort(newNodes, -1, column);
      this._inColumnResize = true;
      this.nodes = [];
      newNodes.forEach((node) => {
        this.addNode(node, false);
        delete node._orig;
      });
    }
    this.nodes.forEach((n) => delete n._orig);
    this.batchUpdate(false, !doCompact);
    delete this._inColumnResize;
    return this;
  }
  cacheLayout(nodes, column, clear = false) {
    let copy = [];
    nodes.forEach((n, i) => {
      var _a;
      n._id = (_a = n._id) != null ? _a : GridStackEngine._idSeq++;
      copy[i] = { x: n.x, y: n.y, w: n.w, _id: n._id };
    });
    this._layouts = clear ? [] : this._layouts || [];
    this._layouts[column] = copy;
    return this;
  }
  cacheOneLayout(n, column) {
    var _a;
    n._id = (_a = n._id) != null ? _a : GridStackEngine._idSeq++;
    let l = { x: n.x, y: n.y, w: n.w, _id: n._id };
    if (n.autoPosition) {
      delete l.x;
      delete l.y;
      l.autoPosition = true;
    }
    this._layouts = this._layouts || [];
    this._layouts[column] = this._layouts[column] || [];
    let index = this.findCacheLayout(n, column);
    if (index === -1)
      this._layouts[column].push(l);
    else
      this._layouts[column][index] = l;
    return this;
  }
  findCacheLayout(n, column) {
    var _a, _b, _c;
    return (_c = (_b = (_a = this._layouts) == null ? void 0 : _a[column]) == null ? void 0 : _b.findIndex((l) => l._id === n._id)) != null ? _c : -1;
  }
  cleanupNode(node) {
    for (let prop in node) {
      if (prop[0] === "_" && prop !== "_id")
        delete node[prop];
    }
    return this;
  }
};
GridStackEngine._idSeq = 0;

// node_modules/gridstack/dist/types.js
var gridDefaults = {
  alwaysShowResizeHandle: "mobile",
  animate: true,
  auto: true,
  cellHeight: "auto",
  cellHeightThrottle: 100,
  cellHeightUnit: "px",
  column: 12,
  draggable: { handle: ".grid-stack-item-content", appendTo: "body", scroll: true },
  handle: ".grid-stack-item-content",
  itemClass: "grid-stack-item",
  margin: 10,
  marginUnit: "px",
  maxRow: 0,
  minRow: 0,
  oneColumnSize: 768,
  placeholderClass: "grid-stack-placeholder",
  placeholderText: "",
  removableOptions: { accept: "grid-stack-item", decline: "grid-stack-non-removable" },
  resizable: { handles: "se" },
  rtl: "auto"
};
var dragInDefaultOptions = {
  handle: ".grid-stack-item-content",
  appendTo: "body"
};

// node_modules/gridstack/dist/dd-manager.js
var DDManager = class {
};

// node_modules/gridstack/dist/dd-touch.js
var isTouch = typeof window !== "undefined" && typeof document !== "undefined" && ("ontouchstart" in document || "ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
var DDTouch = class {
};
function simulateMouseEvent(e, simulatedType) {
  if (e.touches.length > 1)
    return;
  if (e.cancelable)
    e.preventDefault();
  const touch = e.changedTouches[0], simulatedEvent = document.createEvent("MouseEvents");
  simulatedEvent.initMouseEvent(
    simulatedType,
    true,
    true,
    window,
    1,
    touch.screenX,
    touch.screenY,
    touch.clientX,
    touch.clientY,
    false,
    false,
    false,
    false,
    0,
    null
  );
  e.target.dispatchEvent(simulatedEvent);
}
function simulatePointerMouseEvent(e, simulatedType) {
  if (e.cancelable)
    e.preventDefault();
  const simulatedEvent = document.createEvent("MouseEvents");
  simulatedEvent.initMouseEvent(
    simulatedType,
    true,
    true,
    window,
    1,
    e.screenX,
    e.screenY,
    e.clientX,
    e.clientY,
    false,
    false,
    false,
    false,
    0,
    null
  );
  e.target.dispatchEvent(simulatedEvent);
}
function touchstart(e) {
  if (DDTouch.touchHandled)
    return;
  DDTouch.touchHandled = true;
  simulateMouseEvent(e, "mousedown");
}
function touchmove(e) {
  if (!DDTouch.touchHandled)
    return;
  simulateMouseEvent(e, "mousemove");
}
function touchend(e) {
  if (!DDTouch.touchHandled)
    return;
  if (DDTouch.pointerLeaveTimeout) {
    window.clearTimeout(DDTouch.pointerLeaveTimeout);
    delete DDTouch.pointerLeaveTimeout;
  }
  const wasDragging = !!DDManager.dragElement;
  simulateMouseEvent(e, "mouseup");
  if (!wasDragging) {
    simulateMouseEvent(e, "click");
  }
  DDTouch.touchHandled = false;
}
function pointerdown(e) {
  if (e.pointerType === "mouse")
    return;
  e.target.releasePointerCapture(e.pointerId);
}
function pointerenter(e) {
  if (!DDManager.dragElement) {
    return;
  }
  if (e.pointerType === "mouse")
    return;
  simulatePointerMouseEvent(e, "mouseenter");
}
function pointerleave(e) {
  if (!DDManager.dragElement) {
    return;
  }
  if (e.pointerType === "mouse")
    return;
  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {
    delete DDTouch.pointerLeaveTimeout;
    simulatePointerMouseEvent(e, "mouseleave");
  }, 10);
}

// node_modules/gridstack/dist/dd-resizable-handle.js
var DDResizableHandle = class {
  constructor(host, direction, option) {
    this.moving = false;
    this.host = host;
    this.dir = direction;
    this.option = option;
    this._mouseDown = this._mouseDown.bind(this);
    this._mouseMove = this._mouseMove.bind(this);
    this._mouseUp = this._mouseUp.bind(this);
    this._init();
  }
  _init() {
    const el = document.createElement("div");
    el.classList.add("ui-resizable-handle");
    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);
    el.style.zIndex = "100";
    el.style.userSelect = "none";
    this.el = el;
    this.host.appendChild(this.el);
    this.el.addEventListener("mousedown", this._mouseDown);
    if (isTouch) {
      this.el.addEventListener("touchstart", touchstart);
      this.el.addEventListener("pointerdown", pointerdown);
    }
    return this;
  }
  destroy() {
    if (this.moving)
      this._mouseUp(this.mouseDownEvent);
    this.el.removeEventListener("mousedown", this._mouseDown);
    if (isTouch) {
      this.el.removeEventListener("touchstart", touchstart);
      this.el.removeEventListener("pointerdown", pointerdown);
    }
    this.host.removeChild(this.el);
    delete this.el;
    delete this.host;
    return this;
  }
  _mouseDown(e) {
    this.mouseDownEvent = e;
    document.addEventListener("mousemove", this._mouseMove, true);
    document.addEventListener("mouseup", this._mouseUp, true);
    if (isTouch) {
      this.el.addEventListener("touchmove", touchmove);
      this.el.addEventListener("touchend", touchend);
    }
    e.stopPropagation();
    e.preventDefault();
  }
  _mouseMove(e) {
    let s = this.mouseDownEvent;
    if (this.moving) {
      this._triggerEvent("move", e);
    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {
      this.moving = true;
      this._triggerEvent("start", this.mouseDownEvent);
      this._triggerEvent("move", e);
    }
    e.stopPropagation();
    e.preventDefault();
  }
  _mouseUp(e) {
    if (this.moving) {
      this._triggerEvent("stop", e);
    }
    document.removeEventListener("mousemove", this._mouseMove, true);
    document.removeEventListener("mouseup", this._mouseUp, true);
    if (isTouch) {
      this.el.removeEventListener("touchmove", touchmove);
      this.el.removeEventListener("touchend", touchend);
    }
    delete this.moving;
    delete this.mouseDownEvent;
    e.stopPropagation();
    e.preventDefault();
  }
  _triggerEvent(name, event) {
    if (this.option[name])
      this.option[name](event);
    return this;
  }
};
DDResizableHandle.prefix = "ui-resizable-";

// node_modules/gridstack/dist/dd-base-impl.js
var DDBaseImplement = class {
  constructor() {
    this._eventRegister = {};
  }
  get disabled() {
    return this._disabled;
  }
  on(event, callback) {
    this._eventRegister[event] = callback;
  }
  off(event) {
    delete this._eventRegister[event];
  }
  enable() {
    this._disabled = false;
  }
  disable() {
    this._disabled = true;
  }
  destroy() {
    delete this._eventRegister;
  }
  triggerEvent(eventName, event) {
    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])
      return this._eventRegister[eventName](event);
  }
};

// node_modules/gridstack/dist/dd-resizable.js
var DDResizable = class extends DDBaseImplement {
  constructor(el, opts = {}) {
    super();
    this._ui = () => {
      const containmentEl = this.el.parentElement;
      const containmentRect = containmentEl.getBoundingClientRect();
      const newRect = {
        width: this.originalRect.width,
        height: this.originalRect.height + this.scrolled,
        left: this.originalRect.left,
        top: this.originalRect.top - this.scrolled
      };
      const rect = this.temporalRect || newRect;
      return {
        position: {
          left: rect.left - containmentRect.left,
          top: rect.top - containmentRect.top
        },
        size: {
          width: rect.width,
          height: rect.height
        }
      };
    };
    this.el = el;
    this.option = opts;
    this._mouseOver = this._mouseOver.bind(this);
    this._mouseOut = this._mouseOut.bind(this);
    this.enable();
    this._setupAutoHide(this.option.autoHide);
    this._setupHandlers();
  }
  on(event, callback) {
    super.on(event, callback);
  }
  off(event) {
    super.off(event);
  }
  enable() {
    super.enable();
    this.el.classList.remove("ui-resizable-disabled");
    this._setupAutoHide(this.option.autoHide);
  }
  disable() {
    super.disable();
    this.el.classList.add("ui-resizable-disabled");
    this._setupAutoHide(false);
  }
  destroy() {
    this._removeHandlers();
    this._setupAutoHide(false);
    delete this.el;
    super.destroy();
  }
  updateOption(opts) {
    let updateHandles = opts.handles && opts.handles !== this.option.handles;
    let updateAutoHide = opts.autoHide && opts.autoHide !== this.option.autoHide;
    Object.keys(opts).forEach((key) => this.option[key] = opts[key]);
    if (updateHandles) {
      this._removeHandlers();
      this._setupHandlers();
    }
    if (updateAutoHide) {
      this._setupAutoHide(this.option.autoHide);
    }
    return this;
  }
  _setupAutoHide(auto) {
    if (auto) {
      this.el.classList.add("ui-resizable-autohide");
      this.el.addEventListener("mouseover", this._mouseOver);
      this.el.addEventListener("mouseout", this._mouseOut);
    } else {
      this.el.classList.remove("ui-resizable-autohide");
      this.el.removeEventListener("mouseover", this._mouseOver);
      this.el.removeEventListener("mouseout", this._mouseOut);
      if (DDManager.overResizeElement === this) {
        delete DDManager.overResizeElement;
      }
    }
    return this;
  }
  _mouseOver(e) {
    if (DDManager.overResizeElement || DDManager.dragElement)
      return;
    DDManager.overResizeElement = this;
    this.el.classList.remove("ui-resizable-autohide");
  }
  _mouseOut(e) {
    if (DDManager.overResizeElement !== this)
      return;
    delete DDManager.overResizeElement;
    this.el.classList.add("ui-resizable-autohide");
  }
  _setupHandlers() {
    let handlerDirection = this.option.handles || "e,s,se";
    if (handlerDirection === "all") {
      handlerDirection = "n,e,s,w,se,sw,ne,nw";
    }
    this.handlers = handlerDirection.split(",").map((dir) => dir.trim()).map((dir) => new DDResizableHandle(this.el, dir, {
      start: (event) => {
        this._resizeStart(event);
      },
      stop: (event) => {
        this._resizeStop(event);
      },
      move: (event) => {
        this._resizing(event, dir);
      }
    }));
    return this;
  }
  _resizeStart(event) {
    this.originalRect = this.el.getBoundingClientRect();
    this.scrollEl = Utils.getScrollElement(this.el);
    this.scrollY = this.scrollEl.scrollTop;
    this.scrolled = 0;
    this.startEvent = event;
    this._setupHelper();
    this._applyChange();
    const ev = Utils.initEvent(event, { type: "resizestart", target: this.el });
    if (this.option.start) {
      this.option.start(ev, this._ui());
    }
    this.el.classList.add("ui-resizable-resizing");
    this.triggerEvent("resizestart", ev);
    return this;
  }
  _resizing(event, dir) {
    this.scrolled = this.scrollEl.scrollTop - this.scrollY;
    this.temporalRect = this._getChange(event, dir);
    this._applyChange();
    const ev = Utils.initEvent(event, { type: "resize", target: this.el });
    if (this.option.resize) {
      this.option.resize(ev, this._ui());
    }
    this.triggerEvent("resize", ev);
    return this;
  }
  _resizeStop(event) {
    const ev = Utils.initEvent(event, { type: "resizestop", target: this.el });
    if (this.option.stop) {
      this.option.stop(ev);
    }
    this.el.classList.remove("ui-resizable-resizing");
    this.triggerEvent("resizestop", ev);
    this._cleanHelper();
    delete this.startEvent;
    delete this.originalRect;
    delete this.temporalRect;
    delete this.scrollY;
    delete this.scrolled;
    return this;
  }
  _setupHelper() {
    this.elOriginStyleVal = DDResizable._originStyleProp.map((prop) => this.el.style[prop]);
    this.parentOriginStylePosition = this.el.parentElement.style.position;
    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {
      this.el.parentElement.style.position = "relative";
    }
    this.el.style.position = "absolute";
    this.el.style.opacity = "0.8";
    return this;
  }
  _cleanHelper() {
    DDResizable._originStyleProp.forEach((prop, i) => {
      this.el.style[prop] = this.elOriginStyleVal[i] || null;
    });
    this.el.parentElement.style.position = this.parentOriginStylePosition || null;
    return this;
  }
  _getChange(event, dir) {
    const oEvent = this.startEvent;
    const newRect = {
      width: this.originalRect.width,
      height: this.originalRect.height + this.scrolled,
      left: this.originalRect.left,
      top: this.originalRect.top - this.scrolled
    };
    const offsetX = event.clientX - oEvent.clientX;
    const offsetY = event.clientY - oEvent.clientY;
    if (dir.indexOf("e") > -1) {
      newRect.width += offsetX;
    } else if (dir.indexOf("w") > -1) {
      newRect.width -= offsetX;
      newRect.left += offsetX;
    }
    if (dir.indexOf("s") > -1) {
      newRect.height += offsetY;
    } else if (dir.indexOf("n") > -1) {
      newRect.height -= offsetY;
      newRect.top += offsetY;
    }
    const constrain = this._constrainSize(newRect.width, newRect.height);
    if (Math.round(newRect.width) !== Math.round(constrain.width)) {
      if (dir.indexOf("w") > -1) {
        newRect.left += newRect.width - constrain.width;
      }
      newRect.width = constrain.width;
    }
    if (Math.round(newRect.height) !== Math.round(constrain.height)) {
      if (dir.indexOf("n") > -1) {
        newRect.top += newRect.height - constrain.height;
      }
      newRect.height = constrain.height;
    }
    return newRect;
  }
  _constrainSize(oWidth, oHeight) {
    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;
    const minWidth = this.option.minWidth || oWidth;
    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;
    const minHeight = this.option.minHeight || oHeight;
    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));
    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));
    return { width, height };
  }
  _applyChange() {
    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };
    if (this.el.style.position === "absolute") {
      const containmentEl = this.el.parentElement;
      const { left, top } = containmentEl.getBoundingClientRect();
      containmentRect = { left, top, width: 0, height: 0 };
    }
    if (!this.temporalRect)
      return this;
    Object.keys(this.temporalRect).forEach((key) => {
      const value = this.temporalRect[key];
      this.el.style[key] = value - containmentRect[key] + "px";
    });
    return this;
  }
  _removeHandlers() {
    this.handlers.forEach((handle) => handle.destroy());
    delete this.handlers;
    return this;
  }
};
DDResizable._originStyleProp = ["width", "height", "position", "left", "top", "opacity", "zIndex"];

// node_modules/gridstack/dist/dd-draggable.js
var skipMouseDown = 'input,textarea,button,select,option,[contenteditable="true"],.ui-resizable-handle';
var DDDraggable = class extends DDBaseImplement {
  constructor(el, option = {}) {
    super();
    this.el = el;
    this.option = option;
    let handleName = option.handle.substring(1);
    this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;
    this._mouseDown = this._mouseDown.bind(this);
    this._mouseMove = this._mouseMove.bind(this);
    this._mouseUp = this._mouseUp.bind(this);
    this.enable();
  }
  on(event, callback) {
    super.on(event, callback);
  }
  off(event) {
    super.off(event);
  }
  enable() {
    if (this.disabled === false)
      return;
    super.enable();
    this.dragEl.addEventListener("mousedown", this._mouseDown);
    if (isTouch) {
      this.dragEl.addEventListener("touchstart", touchstart);
      this.dragEl.addEventListener("pointerdown", pointerdown);
    }
    this.el.classList.remove("ui-draggable-disabled");
  }
  disable(forDestroy = false) {
    if (this.disabled === true)
      return;
    super.disable();
    this.dragEl.removeEventListener("mousedown", this._mouseDown);
    if (isTouch) {
      this.dragEl.removeEventListener("touchstart", touchstart);
      this.dragEl.removeEventListener("pointerdown", pointerdown);
    }
    if (!forDestroy)
      this.el.classList.add("ui-draggable-disabled");
  }
  destroy() {
    if (this.dragTimeout)
      window.clearTimeout(this.dragTimeout);
    delete this.dragTimeout;
    if (this.dragging)
      this._mouseUp(this.mouseDownEvent);
    this.disable(true);
    delete this.el;
    delete this.helper;
    delete this.option;
    super.destroy();
  }
  updateOption(opts) {
    Object.keys(opts).forEach((key) => this.option[key] = opts[key]);
    return this;
  }
  _mouseDown(e) {
    if (DDManager.mouseHandled)
      return;
    if (e.button !== 0)
      return true;
    if (e.target.closest(skipMouseDown))
      return true;
    if (this.option.cancel) {
      if (e.target.closest(this.option.cancel))
        return true;
    }
    this.mouseDownEvent = e;
    delete this.dragging;
    delete DDManager.dragElement;
    delete DDManager.dropElement;
    document.addEventListener("mousemove", this._mouseMove, true);
    document.addEventListener("mouseup", this._mouseUp, true);
    if (isTouch) {
      this.dragEl.addEventListener("touchmove", touchmove);
      this.dragEl.addEventListener("touchend", touchend);
    }
    e.preventDefault();
    if (document.activeElement)
      document.activeElement.blur();
    DDManager.mouseHandled = true;
    return true;
  }
  _callDrag(e) {
    if (!this.dragging)
      return;
    const ev = Utils.initEvent(e, { target: this.el, type: "drag" });
    if (this.option.drag) {
      this.option.drag(ev, this.ui());
    }
    this.triggerEvent("drag", ev);
  }
  _mouseMove(e) {
    var _a;
    let s = this.mouseDownEvent;
    if (this.dragging) {
      this._dragFollow(e);
      if (DDManager.pauseDrag) {
        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag : 100;
        if (this.dragTimeout)
          window.clearTimeout(this.dragTimeout);
        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);
      } else {
        this._callDrag(e);
      }
    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {
      this.dragging = true;
      DDManager.dragElement = this;
      let grid = (_a = this.el.gridstackNode) == null ? void 0 : _a.grid;
      if (grid) {
        DDManager.dropElement = grid.el.ddElement.ddDroppable;
      } else {
        delete DDManager.dropElement;
      }
      this.helper = this._createHelper(e);
      this._setupHelperContainmentStyle();
      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);
      const ev = Utils.initEvent(e, { target: this.el, type: "dragstart" });
      this._setupHelperStyle(e);
      if (this.option.start) {
        this.option.start(ev, this.ui());
      }
      this.triggerEvent("dragstart", ev);
    }
    e.preventDefault();
    return true;
  }
  _mouseUp(e) {
    var _a;
    document.removeEventListener("mousemove", this._mouseMove, true);
    document.removeEventListener("mouseup", this._mouseUp, true);
    if (isTouch) {
      this.dragEl.removeEventListener("touchmove", touchmove, true);
      this.dragEl.removeEventListener("touchend", touchend, true);
    }
    if (this.dragging) {
      delete this.dragging;
      if (((_a = DDManager.dropElement) == null ? void 0 : _a.el) === this.el.parentElement) {
        delete DDManager.dropElement;
      }
      this.helperContainment.style.position = this.parentOriginStylePosition || null;
      if (this.helper === this.el) {
        this._removeHelperStyle();
      } else {
        this.helper.remove();
      }
      const ev = Utils.initEvent(e, { target: this.el, type: "dragstop" });
      if (this.option.stop) {
        this.option.stop(ev);
      }
      this.triggerEvent("dragstop", ev);
      if (DDManager.dropElement) {
        DDManager.dropElement.drop(e);
      }
    }
    delete this.helper;
    delete this.mouseDownEvent;
    delete DDManager.dragElement;
    delete DDManager.dropElement;
    delete DDManager.mouseHandled;
    e.preventDefault();
  }
  _createHelper(event) {
    let helper = this.el;
    if (typeof this.option.helper === "function") {
      helper = this.option.helper(event);
    } else if (this.option.helper === "clone") {
      helper = Utils.cloneNode(this.el);
    }
    if (!document.body.contains(helper)) {
      Utils.appendTo(helper, this.option.appendTo === "parent" ? this.el.parentElement : this.option.appendTo);
    }
    if (helper === this.el) {
      this.dragElementOriginStyle = DDDraggable.originStyleProp.map((prop) => this.el.style[prop]);
    }
    return helper;
  }
  _setupHelperStyle(e) {
    this.helper.classList.add("ui-draggable-dragging");
    const style = this.helper.style;
    style.pointerEvents = "none";
    style.width = this.dragOffset.width + "px";
    style.height = this.dragOffset.height + "px";
    style.willChange = "left, top";
    style.position = "fixed";
    this._dragFollow(e);
    style.transition = "none";
    setTimeout(() => {
      if (this.helper) {
        style.transition = null;
      }
    }, 0);
    return this;
  }
  _removeHelperStyle() {
    var _a;
    this.helper.classList.remove("ui-draggable-dragging");
    let node = (_a = this.helper) == null ? void 0 : _a.gridstackNode;
    if (!(node == null ? void 0 : node._isAboutToRemove) && this.dragElementOriginStyle) {
      let helper = this.helper;
      let transition = this.dragElementOriginStyle["transition"] || null;
      helper.style.transition = this.dragElementOriginStyle["transition"] = "none";
      DDDraggable.originStyleProp.forEach((prop) => helper.style[prop] = this.dragElementOriginStyle[prop] || null);
      setTimeout(() => helper.style.transition = transition, 50);
    }
    delete this.dragElementOriginStyle;
    return this;
  }
  _dragFollow(e) {
    let containmentRect = { left: 0, top: 0 };
    const style = this.helper.style;
    const offset = this.dragOffset;
    style.left = e.clientX + offset.offsetLeft - containmentRect.left + "px";
    style.top = e.clientY + offset.offsetTop - containmentRect.top + "px";
  }
  _setupHelperContainmentStyle() {
    this.helperContainment = this.helper.parentElement;
    if (this.helper.style.position !== "fixed") {
      this.parentOriginStylePosition = this.helperContainment.style.position;
      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {
        this.helperContainment.style.position = "relative";
      }
    }
    return this;
  }
  _getDragOffset(event, el, parent) {
    let xformOffsetX = 0;
    let xformOffsetY = 0;
    if (parent) {
      const testEl = document.createElement("div");
      Utils.addElStyles(testEl, {
        opacity: "0",
        position: "fixed",
        top: 0 + "px",
        left: 0 + "px",
        width: "1px",
        height: "1px",
        zIndex: "-999999"
      });
      parent.appendChild(testEl);
      const testElPosition = testEl.getBoundingClientRect();
      parent.removeChild(testEl);
      xformOffsetX = testElPosition.left;
      xformOffsetY = testElPosition.top;
    }
    const targetOffset = el.getBoundingClientRect();
    return {
      left: targetOffset.left,
      top: targetOffset.top,
      offsetLeft: -event.clientX + targetOffset.left - xformOffsetX,
      offsetTop: -event.clientY + targetOffset.top - xformOffsetY,
      width: targetOffset.width,
      height: targetOffset.height
    };
  }
  ui() {
    const containmentEl = this.el.parentElement;
    const containmentRect = containmentEl.getBoundingClientRect();
    const offset = this.helper.getBoundingClientRect();
    return {
      position: {
        top: offset.top - containmentRect.top,
        left: offset.left - containmentRect.left
      }
    };
  }
};
DDDraggable.originStyleProp = ["transition", "pointerEvents", "position", "left", "top", "minWidth", "willChange"];

// node_modules/gridstack/dist/dd-droppable.js
var DDDroppable = class extends DDBaseImplement {
  constructor(el, opts = {}) {
    super();
    this.el = el;
    this.option = opts;
    this._mouseEnter = this._mouseEnter.bind(this);
    this._mouseLeave = this._mouseLeave.bind(this);
    this.enable();
    this._setupAccept();
  }
  on(event, callback) {
    super.on(event, callback);
  }
  off(event) {
    super.off(event);
  }
  enable() {
    if (this.disabled === false)
      return;
    super.enable();
    this.el.classList.add("ui-droppable");
    this.el.classList.remove("ui-droppable-disabled");
    this.el.addEventListener("mouseenter", this._mouseEnter);
    this.el.addEventListener("mouseleave", this._mouseLeave);
    if (isTouch) {
      this.el.addEventListener("pointerenter", pointerenter);
      this.el.addEventListener("pointerleave", pointerleave);
    }
  }
  disable(forDestroy = false) {
    if (this.disabled === true)
      return;
    super.disable();
    this.el.classList.remove("ui-droppable");
    if (!forDestroy)
      this.el.classList.add("ui-droppable-disabled");
    this.el.removeEventListener("mouseenter", this._mouseEnter);
    this.el.removeEventListener("mouseleave", this._mouseLeave);
    if (isTouch) {
      this.el.removeEventListener("pointerenter", pointerenter);
      this.el.removeEventListener("pointerleave", pointerleave);
    }
  }
  destroy() {
    this.disable(true);
    this.el.classList.remove("ui-droppable");
    this.el.classList.remove("ui-droppable-disabled");
    super.destroy();
  }
  updateOption(opts) {
    Object.keys(opts).forEach((key) => this.option[key] = opts[key]);
    this._setupAccept();
    return this;
  }
  _mouseEnter(e) {
    if (!DDManager.dragElement)
      return;
    if (!this._canDrop(DDManager.dragElement.el))
      return;
    e.preventDefault();
    e.stopPropagation();
    if (DDManager.dropElement && DDManager.dropElement !== this) {
      DDManager.dropElement._mouseLeave(e);
    }
    DDManager.dropElement = this;
    const ev = Utils.initEvent(e, { target: this.el, type: "dropover" });
    if (this.option.over) {
      this.option.over(ev, this._ui(DDManager.dragElement));
    }
    this.triggerEvent("dropover", ev);
    this.el.classList.add("ui-droppable-over");
  }
  _mouseLeave(e) {
    var _a;
    if (!DDManager.dragElement || DDManager.dropElement !== this)
      return;
    e.preventDefault();
    e.stopPropagation();
    const ev = Utils.initEvent(e, { target: this.el, type: "dropout" });
    if (this.option.out) {
      this.option.out(ev, this._ui(DDManager.dragElement));
    }
    this.triggerEvent("dropout", ev);
    if (DDManager.dropElement === this) {
      delete DDManager.dropElement;
      let parentDrop;
      let parent = this.el.parentElement;
      while (!parentDrop && parent) {
        parentDrop = (_a = parent.ddElement) == null ? void 0 : _a.ddDroppable;
        parent = parent.parentElement;
      }
      if (parentDrop) {
        parentDrop._mouseEnter(e);
      }
    }
  }
  drop(e) {
    e.preventDefault();
    const ev = Utils.initEvent(e, { target: this.el, type: "drop" });
    if (this.option.drop) {
      this.option.drop(ev, this._ui(DDManager.dragElement));
    }
    this.triggerEvent("drop", ev);
  }
  _canDrop(el) {
    return el && (!this.accept || this.accept(el));
  }
  _setupAccept() {
    if (!this.option.accept)
      return this;
    if (typeof this.option.accept === "string") {
      this.accept = (el) => el.classList.contains(this.option.accept) || el.matches(this.option.accept);
    } else {
      this.accept = this.option.accept;
    }
    return this;
  }
  _ui(drag) {
    return {
      draggable: drag.el,
      ...drag.ui()
    };
  }
};

// node_modules/gridstack/dist/dd-element.js
var DDElement = class {
  static init(el) {
    if (!el.ddElement) {
      el.ddElement = new DDElement(el);
    }
    return el.ddElement;
  }
  constructor(el) {
    this.el = el;
  }
  on(eventName, callback) {
    if (this.ddDraggable && ["drag", "dragstart", "dragstop"].indexOf(eventName) > -1) {
      this.ddDraggable.on(eventName, callback);
    } else if (this.ddDroppable && ["drop", "dropover", "dropout"].indexOf(eventName) > -1) {
      this.ddDroppable.on(eventName, callback);
    } else if (this.ddResizable && ["resizestart", "resize", "resizestop"].indexOf(eventName) > -1) {
      this.ddResizable.on(eventName, callback);
    }
    return this;
  }
  off(eventName) {
    if (this.ddDraggable && ["drag", "dragstart", "dragstop"].indexOf(eventName) > -1) {
      this.ddDraggable.off(eventName);
    } else if (this.ddDroppable && ["drop", "dropover", "dropout"].indexOf(eventName) > -1) {
      this.ddDroppable.off(eventName);
    } else if (this.ddResizable && ["resizestart", "resize", "resizestop"].indexOf(eventName) > -1) {
      this.ddResizable.off(eventName);
    }
    return this;
  }
  setupDraggable(opts) {
    if (!this.ddDraggable) {
      this.ddDraggable = new DDDraggable(this.el, opts);
    } else {
      this.ddDraggable.updateOption(opts);
    }
    return this;
  }
  cleanDraggable() {
    if (this.ddDraggable) {
      this.ddDraggable.destroy();
      delete this.ddDraggable;
    }
    return this;
  }
  setupResizable(opts) {
    if (!this.ddResizable) {
      this.ddResizable = new DDResizable(this.el, opts);
    } else {
      this.ddResizable.updateOption(opts);
    }
    return this;
  }
  cleanResizable() {
    if (this.ddResizable) {
      this.ddResizable.destroy();
      delete this.ddResizable;
    }
    return this;
  }
  setupDroppable(opts) {
    if (!this.ddDroppable) {
      this.ddDroppable = new DDDroppable(this.el, opts);
    } else {
      this.ddDroppable.updateOption(opts);
    }
    return this;
  }
  cleanDroppable() {
    if (this.ddDroppable) {
      this.ddDroppable.destroy();
      delete this.ddDroppable;
    }
    return this;
  }
};

// node_modules/gridstack/dist/dd-gridstack.js
var DDGridStack = class {
  resizable(el, opts, key, value) {
    this._getDDElements(el).forEach((dEl) => {
      if (opts === "disable" || opts === "enable") {
        dEl.ddResizable && dEl.ddResizable[opts]();
      } else if (opts === "destroy") {
        dEl.ddResizable && dEl.cleanResizable();
      } else if (opts === "option") {
        dEl.setupResizable({ [key]: value });
      } else {
        const grid = dEl.el.gridstackNode.grid;
        let handles = dEl.el.getAttribute("gs-resize-handles") ? dEl.el.getAttribute("gs-resize-handles") : grid.opts.resizable.handles;
        let autoHide = !grid.opts.alwaysShowResizeHandle;
        dEl.setupResizable({
          ...grid.opts.resizable,
          ...{ handles, autoHide },
          ...{
            start: opts.start,
            stop: opts.stop,
            resize: opts.resize
          }
        });
      }
    });
    return this;
  }
  draggable(el, opts, key, value) {
    this._getDDElements(el).forEach((dEl) => {
      if (opts === "disable" || opts === "enable") {
        dEl.ddDraggable && dEl.ddDraggable[opts]();
      } else if (opts === "destroy") {
        dEl.ddDraggable && dEl.cleanDraggable();
      } else if (opts === "option") {
        dEl.setupDraggable({ [key]: value });
      } else {
        const grid = dEl.el.gridstackNode.grid;
        dEl.setupDraggable({
          ...grid.opts.draggable,
          ...{
            start: opts.start,
            stop: opts.stop,
            drag: opts.drag
          }
        });
      }
    });
    return this;
  }
  dragIn(el, opts) {
    this._getDDElements(el).forEach((dEl) => dEl.setupDraggable(opts));
    return this;
  }
  droppable(el, opts, key, value) {
    if (typeof opts.accept === "function" && !opts._accept) {
      opts._accept = opts.accept;
      opts.accept = (el2) => opts._accept(el2);
    }
    this._getDDElements(el).forEach((dEl) => {
      if (opts === "disable" || opts === "enable") {
        dEl.ddDroppable && dEl.ddDroppable[opts]();
      } else if (opts === "destroy") {
        if (dEl.ddDroppable) {
          dEl.cleanDroppable();
        }
      } else if (opts === "option") {
        dEl.setupDroppable({ [key]: value });
      } else {
        dEl.setupDroppable(opts);
      }
    });
    return this;
  }
  isDroppable(el) {
    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);
  }
  isDraggable(el) {
    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);
  }
  isResizable(el) {
    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);
  }
  on(el, name, callback) {
    this._getDDElements(el).forEach((dEl) => dEl.on(name, (event) => {
      callback(event, DDManager.dragElement ? DDManager.dragElement.el : event.target, DDManager.dragElement ? DDManager.dragElement.helper : null);
    }));
    return this;
  }
  off(el, name) {
    this._getDDElements(el).forEach((dEl) => dEl.off(name));
    return this;
  }
  _getDDElements(els, create = true) {
    let hosts = Utils.getElements(els);
    if (!hosts.length)
      return [];
    let list = hosts.map((e) => e.ddElement || (create ? DDElement.init(e) : null));
    if (!create) {
      list.filter((d) => d);
    }
    return list;
  }
};

// node_modules/gridstack/dist/gridstack.js
var dd = new DDGridStack();
var GridStack = class {
  static init(options = {}, elOrString = ".grid-stack") {
    let el = GridStack.getGridElement(elOrString);
    if (!el) {
      if (typeof elOrString === "string") {
        console.error('GridStack.initAll() no grid was found with selector "' + elOrString + '" - element missing or wrong selector ?\nNote: ".grid-stack" is required for proper CSS styling and drag/drop, and is the default selector.');
      } else {
        console.error("GridStack.init() no grid element was passed.");
      }
      return null;
    }
    if (!el.gridstack) {
      el.gridstack = new GridStack(el, Utils.cloneDeep(options));
    }
    return el.gridstack;
  }
  static initAll(options = {}, selector = ".grid-stack") {
    let grids = [];
    GridStack.getGridElements(selector).forEach((el) => {
      if (!el.gridstack) {
        el.gridstack = new GridStack(el, Utils.cloneDeep(options));
      }
      grids.push(el.gridstack);
    });
    if (grids.length === 0) {
      console.error('GridStack.initAll() no grid was found with selector "' + selector + '" - element missing or wrong selector ?\nNote: ".grid-stack" is required for proper CSS styling and drag/drop, and is the default selector.');
    }
    return grids;
  }
  static addGrid(parent, opt = {}) {
    if (!parent)
      return null;
    let el = parent;
    if (el.gridstack) {
      const grid2 = el.gridstack;
      if (opt)
        grid2.opts = { ...grid2.opts, ...opt };
      if (opt.children !== void 0)
        grid2.load(opt.children);
      return grid2;
    }
    const parentIsGrid = parent.classList.contains("grid-stack");
    if (!parentIsGrid || GridStack.addRemoveCB) {
      if (GridStack.addRemoveCB) {
        el = GridStack.addRemoveCB(parent, opt, true, true);
      } else {
        let doc = document.implementation.createHTMLDocument("");
        doc.body.innerHTML = `<div class="grid-stack ${opt.class || ""}"></div>`;
        el = doc.body.children[0];
        parent.appendChild(el);
      }
    }
    let grid = GridStack.init(opt, el);
    return grid;
  }
  static registerEngine(engineClass) {
    GridStack.engineClass = engineClass;
  }
  get placeholder() {
    if (!this._placeholder) {
      let placeholderChild = document.createElement("div");
      placeholderChild.className = "placeholder-content";
      if (this.opts.placeholderText) {
        placeholderChild.innerHTML = this.opts.placeholderText;
      }
      this._placeholder = document.createElement("div");
      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);
      this.placeholder.appendChild(placeholderChild);
    }
    return this._placeholder;
  }
  constructor(el, opts = {}) {
    var _a, _b;
    this._gsEventHandler = {};
    this._extraDragRow = 0;
    this.el = el;
    opts = opts || {};
    if (!el.classList.contains("grid-stack")) {
      this.el.classList.add("grid-stack");
    }
    if (opts.row) {
      opts.minRow = opts.maxRow = opts.row;
      delete opts.row;
    }
    let rowAttr = Utils.toNumber(el.getAttribute("gs-row"));
    if (opts.column === "auto") {
      delete opts.column;
    }
    if (opts.alwaysShowResizeHandle !== void 0) {
      opts._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;
    }
    let defaults = {
      ...Utils.cloneDeep(gridDefaults),
      column: Utils.toNumber(el.getAttribute("gs-column")) || gridDefaults.column,
      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute("gs-min-row")) || gridDefaults.minRow,
      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute("gs-max-row")) || gridDefaults.maxRow,
      staticGrid: Utils.toBool(el.getAttribute("gs-static")) || gridDefaults.staticGrid,
      draggable: {
        handle: (opts.handleClass ? "." + opts.handleClass : opts.handle ? opts.handle : "") || gridDefaults.draggable.handle
      },
      removableOptions: {
        accept: opts.itemClass || gridDefaults.removableOptions.accept,
        decline: gridDefaults.removableOptions.decline
      }
    };
    if (el.getAttribute("gs-animate")) {
      defaults.animate = Utils.toBool(el.getAttribute("gs-animate"));
    }
    this.opts = Utils.defaults(opts, defaults);
    opts = null;
    this._initMargin();
    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {
      this._prevColumn = this.getColumn();
      this.opts.column = 1;
    }
    if (this.opts.rtl === "auto") {
      this.opts.rtl = el.style.direction === "rtl";
    }
    if (this.opts.rtl) {
      this.el.classList.add("grid-stack-rtl");
    }
    let parentGridItem = (_a = Utils.closestUpByClass(this.el, gridDefaults.itemClass)) == null ? void 0 : _a.gridstackNode;
    if (parentGridItem) {
      parentGridItem.subGrid = this;
      this.parentGridItem = parentGridItem;
      this.el.classList.add("grid-stack-nested");
      parentGridItem.el.classList.add("grid-stack-sub-grid");
    }
    this._isAutoCellHeight = this.opts.cellHeight === "auto";
    if (this._isAutoCellHeight || this.opts.cellHeight === "initial") {
      this.cellHeight(void 0, false);
    } else {
      if (typeof this.opts.cellHeight == "number" && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {
        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;
        delete this.opts.cellHeightUnit;
      }
      this.cellHeight(this.opts.cellHeight, false);
    }
    if (this.opts.alwaysShowResizeHandle === "mobile") {
      this.opts.alwaysShowResizeHandle = isTouch;
    }
    this._styleSheetClass = "gs-id-" + GridStackEngine._idSeq++;
    this.el.classList.add(this._styleSheetClass);
    this._setStaticClass();
    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;
    this.engine = new engineClass({
      column: this.getColumn(),
      float: this.opts.float,
      maxRow: this.opts.maxRow,
      onChange: (cbNodes) => {
        let maxH = 0;
        this.engine.nodes.forEach((n) => {
          maxH = Math.max(maxH, n.y + n.h);
        });
        cbNodes.forEach((n) => {
          let el2 = n.el;
          if (!el2)
            return;
          if (n._removeDOM) {
            if (el2)
              el2.remove();
            delete n._removeDOM;
          } else {
            this._writePosAttr(el2, n);
          }
        });
        this._updateStyles(false, maxH);
      }
    });
    if (this.opts.auto) {
      this.batchUpdate();
      this.getGridItems().forEach((el2) => this._prepareElement(el2));
      this.batchUpdate(false);
    }
    if (this.opts.children) {
      let children = this.opts.children;
      delete this.opts.children;
      if (children.length)
        this.load(children);
    }
    this.setAnimation(this.opts.animate);
    this._updateStyles();
    this.el.classList.add("gs-" + this.opts.column);
    if (this.opts.subGridDynamic && !DDManager.pauseDrag)
      DDManager.pauseDrag = true;
    if (((_b = this.opts.draggable) == null ? void 0 : _b.pause) !== void 0)
      DDManager.pauseDrag = this.opts.draggable.pause;
    this._setupRemoveDrop();
    this._setupAcceptWidget();
    this._updateResizeEvent();
  }
  addWidget(els, options) {
    function isGridStackWidget(w) {
      return w.el !== void 0 || w.x !== void 0 || w.y !== void 0 || w.w !== void 0 || w.h !== void 0 || w.content !== void 0 ? true : false;
    }
    let el;
    let node;
    if (typeof els === "string") {
      let doc = document.implementation.createHTMLDocument("");
      doc.body.innerHTML = els;
      el = doc.body.children[0];
    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {
      node = options = els;
      if (node == null ? void 0 : node.el) {
        el = node.el;
      } else if (GridStack.addRemoveCB) {
        el = GridStack.addRemoveCB(this.el, options, true, false);
      } else {
        let content = (options == null ? void 0 : options.content) || "";
        let doc = document.implementation.createHTMLDocument("");
        doc.body.innerHTML = `<div class="grid-stack-item ${this.opts.itemClass || ""}"><div class="grid-stack-item-content">${content}</div></div>`;
        el = doc.body.children[0];
      }
    } else {
      el = els;
    }
    if (!el)
      return;
    node = el.gridstackNode;
    if (node && el.parentElement === this.el && this.engine.nodes.find((n) => n._id === node._id))
      return el;
    let domAttr = this._readAttr(el);
    options = Utils.cloneDeep(options) || {};
    Utils.defaults(options, domAttr);
    node = this.engine.prepareNode(options);
    this._writeAttr(el, options);
    if (this._insertNotAppend) {
      this.el.prepend(el);
    } else {
      this.el.appendChild(el);
    }
    this.makeWidget(el, options);
    return el;
  }
  makeSubGrid(el, ops, nodeToAdd, saveContent = true) {
    var _a, _b, _c;
    let node = el.gridstackNode;
    if (!node) {
      node = this.makeWidget(el).gridstackNode;
    }
    if ((_a = node.subGrid) == null ? void 0 : _a.el)
      return node.subGrid;
    let subGridTemplate;
    let grid = this;
    while (grid && !subGridTemplate) {
      subGridTemplate = (_b = grid.opts) == null ? void 0 : _b.subGridOpts;
      grid = (_c = grid.parentGridItem) == null ? void 0 : _c.grid;
    }
    ops = Utils.cloneDeep({ ...subGridTemplate || {}, children: void 0, ...ops || node.subGridOpts });
    node.subGridOpts = ops;
    let autoColumn;
    if (ops.column === "auto") {
      autoColumn = true;
      ops.column = Math.max(node.w || 1, (nodeToAdd == null ? void 0 : nodeToAdd.w) || 1);
      ops.disableOneColumnMode = true;
    }
    let content = node.el.querySelector(".grid-stack-item-content");
    let newItem;
    let newItemOpt;
    if (saveContent) {
      this._removeDD(node.el);
      newItemOpt = { ...node, x: 0, y: 0 };
      Utils.removeInternalForSave(newItemOpt);
      delete newItemOpt.subGridOpts;
      if (node.content) {
        newItemOpt.content = node.content;
        delete node.content;
      }
      if (GridStack.addRemoveCB) {
        newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);
      } else {
        let doc = document.implementation.createHTMLDocument("");
        doc.body.innerHTML = `<div class="grid-stack-item"></div>`;
        newItem = doc.body.children[0];
        newItem.appendChild(content);
        doc.body.innerHTML = `<div class="grid-stack-item-content"></div>`;
        content = doc.body.children[0];
        node.el.appendChild(content);
      }
      this._prepareDragDropByNode(node);
    }
    if (nodeToAdd) {
      let w = autoColumn ? ops.column : node.w;
      let h = node.h + nodeToAdd.h;
      let style = node.el.style;
      style.transition = "none";
      this.update(node.el, { w, h });
      setTimeout(() => style.transition = null);
    }
    let subGrid = node.subGrid = GridStack.addGrid(content, ops);
    if (nodeToAdd == null ? void 0 : nodeToAdd._moving)
      subGrid._isTemp = true;
    if (autoColumn)
      subGrid._autoColumn = true;
    if (saveContent) {
      subGrid.addWidget(newItem, newItemOpt);
    }
    if (nodeToAdd) {
      if (nodeToAdd._moving) {
        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, "mouseenter", subGrid.el), 0);
      } else {
        subGrid.addWidget(node.el, node);
      }
    }
    return subGrid;
  }
  removeAsSubGrid(nodeThatRemoved) {
    var _a;
    let pGrid = (_a = this.parentGridItem) == null ? void 0 : _a.grid;
    if (!pGrid)
      return;
    pGrid.batchUpdate();
    pGrid.removeWidget(this.parentGridItem.el, true, true);
    this.engine.nodes.forEach((n) => {
      n.x += this.parentGridItem.x;
      n.y += this.parentGridItem.y;
      pGrid.addWidget(n.el, n);
    });
    pGrid.batchUpdate(false);
    if (this.parentGridItem)
      delete this.parentGridItem.subGrid;
    delete this.parentGridItem;
    if (nodeThatRemoved) {
      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, "mouseenter", pGrid.el), 0);
    }
  }
  save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB) {
    let list = this.engine.save(saveContent, saveCB);
    list.forEach((n) => {
      var _a;
      if (saveContent && n.el && !n.subGrid && !saveCB) {
        let sub = n.el.querySelector(".grid-stack-item-content");
        n.content = sub ? sub.innerHTML : void 0;
        if (!n.content)
          delete n.content;
      } else {
        if (!saveContent && !saveCB) {
          delete n.content;
        }
        if ((_a = n.subGrid) == null ? void 0 : _a.el) {
          const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);
          n.subGridOpts = saveGridOpt ? listOrOpt : { children: listOrOpt };
          delete n.subGrid;
        }
      }
      delete n.el;
    });
    if (saveGridOpt) {
      let o = Utils.cloneDeep(this.opts);
      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {
        o.margin = o.marginTop;
        delete o.marginTop;
        delete o.marginRight;
        delete o.marginBottom;
        delete o.marginLeft;
      }
      if (o.rtl === (this.el.style.direction === "rtl")) {
        o.rtl = "auto";
      }
      if (this._isAutoCellHeight) {
        o.cellHeight = "auto";
      }
      if (this._autoColumn) {
        o.column = "auto";
        delete o.disableOneColumnMode;
      }
      const origShow = o._alwaysShowResizeHandle;
      delete o._alwaysShowResizeHandle;
      if (origShow !== void 0) {
        o.alwaysShowResizeHandle = origShow;
      } else {
        delete o.alwaysShowResizeHandle;
      }
      Utils.removeInternalAndSame(o, gridDefaults);
      o.children = list;
      return o;
    }
    return list;
  }
  load(layout, addRemove = GridStack.addRemoveCB || true) {
    const haveCoord = layout.some((w) => w.x !== void 0 || w.y !== void 0);
    let items = haveCoord ? Utils.sort(layout, -1, this._prevColumn || this.getColumn()) : layout;
    this._insertNotAppend = haveCoord;
    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some((n) => (n.x || 0) + n.w > this.opts.column)) {
      this._ignoreLayoutsNodeChange = true;
      this.engine.cacheLayout(items, this._prevColumn, true);
    }
    const prevCB = GridStack.addRemoveCB;
    if (typeof addRemove === "function")
      GridStack.addRemoveCB = addRemove;
    let removed = [];
    this.batchUpdate();
    if (addRemove) {
      let copyNodes2 = [...this.engine.nodes];
      copyNodes2.forEach((n) => {
        let item = items.find((w) => n.id === w.id);
        if (!item) {
          if (GridStack.addRemoveCB)
            GridStack.addRemoveCB(this.el, n, false, false);
          removed.push(n);
          this.removeWidget(n.el, true, false);
        }
      });
    }
    let copyNodes = this.engine.nodes;
    this.engine.nodes = [];
    items.forEach((w) => {
      var _a;
      let item = w.id !== void 0 ? copyNodes.find((n) => n.id === w.id) : void 0;
      if (item) {
        if (w.autoPosition || w.x === void 0 || w.y === void 0) {
          w.w = w.w || item.w;
          w.h = w.h || item.h;
          this.engine.findEmptyPosition(w);
        }
        this.engine.nodes.push(item);
        this.update(item.el, w);
        if ((_a = w.subGridOpts) == null ? void 0 : _a.children) {
          let sub = item.el.querySelector(".grid-stack");
          if (sub && sub.gridstack) {
            sub.gridstack.load(w.subGridOpts.children);
            this._insertNotAppend = true;
          }
        }
      } else if (addRemove) {
        this.addWidget(w);
      }
    });
    this.engine.removedNodes = removed;
    this.batchUpdate(false);
    delete this._ignoreLayoutsNodeChange;
    delete this._insertNotAppend;
    prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;
    return this;
  }
  batchUpdate(flag = true) {
    this.engine.batchUpdate(flag);
    if (!flag) {
      this._updateContainerHeight();
      this._triggerRemoveEvent();
      this._triggerAddEvent();
      this._triggerChangeEvent();
    }
    return this;
  }
  getCellHeight(forcePixel = false) {
    if (this.opts.cellHeight && this.opts.cellHeight !== "auto" && (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === "px")) {
      return this.opts.cellHeight;
    }
    let el = this.el.querySelector("." + this.opts.itemClass);
    if (el) {
      let height = Utils.toNumber(el.getAttribute("gs-h")) || 1;
      return Math.round(el.offsetHeight / height);
    }
    let rows = parseInt(this.el.getAttribute("gs-current-row"));
    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight;
  }
  cellHeight(val, update = true) {
    if (update && val !== void 0) {
      if (this._isAutoCellHeight !== (val === "auto")) {
        this._isAutoCellHeight = val === "auto";
        this._updateResizeEvent();
      }
    }
    if (val === "initial" || val === "auto") {
      val = void 0;
    }
    if (val === void 0) {
      let marginDiff = -this.opts.marginRight - this.opts.marginLeft + this.opts.marginTop + this.opts.marginBottom;
      val = this.cellWidth() + marginDiff;
    }
    let data = Utils.parseHeight(val);
    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {
      return this;
    }
    this.opts.cellHeightUnit = data.unit;
    this.opts.cellHeight = data.h;
    this.doContentResize(false);
    if (update) {
      this._updateStyles(true);
    }
    return this;
  }
  cellWidth() {
    return this._widthOrContainer() / this.getColumn();
  }
  _widthOrContainer() {
    return this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth;
  }
  compact(layout = "compact", doSort = true) {
    this.engine.compact(layout, doSort);
    this._triggerChangeEvent();
    return this;
  }
  column(column, layout = "moveScale") {
    if (!column || column < 1 || this.opts.column === column)
      return this;
    let oldColumn = this.getColumn();
    if (column === 1) {
      this._prevColumn = oldColumn;
    } else {
      delete this._prevColumn;
    }
    this.el.classList.remove("gs-" + oldColumn);
    this.el.classList.add("gs-" + column);
    this.opts.column = this.engine.column = column;
    let domNodes;
    if (column === 1 && this.opts.oneColumnModeDomSort) {
      domNodes = [];
      this.getGridItems().forEach((el) => {
        if (el.gridstackNode) {
          domNodes.push(el.gridstackNode);
        }
      });
      if (!domNodes.length) {
        domNodes = void 0;
      }
    }
    this.engine.columnChanged(oldColumn, column, domNodes, layout);
    if (this._isAutoCellHeight)
      this.cellHeight();
    this.doContentResize();
    this._ignoreLayoutsNodeChange = true;
    this._triggerChangeEvent();
    delete this._ignoreLayoutsNodeChange;
    return this;
  }
  getColumn() {
    return this.opts.column;
  }
  getGridItems() {
    return Array.from(this.el.children).filter((el) => el.matches("." + this.opts.itemClass) && !el.matches("." + this.opts.placeholderClass));
  }
  destroy(removeDOM = true) {
    if (!this.el)
      return;
    this.offAll();
    this._updateResizeEvent(true);
    this.setStatic(true, false);
    this.setAnimation(false);
    if (!removeDOM) {
      this.removeAll(removeDOM);
      this.el.classList.remove(this._styleSheetClass);
      this.el.removeAttribute("gs-current-row");
    } else {
      this.el.parentNode.removeChild(this.el);
    }
    this._removeStylesheet();
    if (this.parentGridItem)
      delete this.parentGridItem.subGrid;
    delete this.parentGridItem;
    delete this.opts;
    delete this._placeholder;
    delete this.engine;
    delete this.el.gridstack;
    delete this.el;
    return this;
  }
  float(val) {
    if (this.opts.float !== val) {
      this.opts.float = this.engine.float = val;
      this._triggerChangeEvent();
    }
    return this;
  }
  getFloat() {
    return this.engine.float;
  }
  getCellFromPixel(position, useDocRelative = false) {
    let box = this.el.getBoundingClientRect();
    let containerPos;
    if (useDocRelative) {
      containerPos = { top: box.top + document.documentElement.scrollTop, left: box.left };
    } else {
      containerPos = { top: this.el.offsetTop, left: this.el.offsetLeft };
    }
    let relativeLeft = position.left - containerPos.left;
    let relativeTop = position.top - containerPos.top;
    let columnWidth = box.width / this.getColumn();
    let rowHeight = box.height / parseInt(this.el.getAttribute("gs-current-row"));
    return { x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight) };
  }
  getRow() {
    return Math.max(this.engine.getRow(), this.opts.minRow);
  }
  isAreaEmpty(x, y, w, h) {
    return this.engine.isAreaEmpty(x, y, w, h);
  }
  makeWidget(els, options) {
    let el = GridStack.getElement(els);
    this._prepareElement(el, true, options);
    const node = el.gridstackNode;
    this._updateContainerHeight();
    this.doContentResize(false, node);
    if (node.subGridOpts) {
      this.makeSubGrid(el, node.subGridOpts, void 0, false);
    }
    if (this._prevColumn && this.opts.column === 1) {
      this._ignoreLayoutsNodeChange = true;
    }
    this._triggerAddEvent();
    this._triggerChangeEvent();
    delete this._ignoreLayoutsNodeChange;
    return el;
  }
  on(name, callback) {
    if (name.indexOf(" ") !== -1) {
      let names = name.split(" ");
      names.forEach((name2) => this.on(name2, callback));
      return this;
    }
    if (name === "change" || name === "added" || name === "removed" || name === "enable" || name === "disable") {
      let noData = name === "enable" || name === "disable";
      if (noData) {
        this._gsEventHandler[name] = (event) => callback(event);
      } else {
        this._gsEventHandler[name] = (event) => callback(event, event.detail);
      }
      this.el.addEventListener(name, this._gsEventHandler[name]);
    } else if (name === "drag" || name === "dragstart" || name === "dragstop" || name === "resizestart" || name === "resize" || name === "resizestop" || name === "dropped" || name === "resizecontent") {
      this._gsEventHandler[name] = callback;
    } else {
      console.log("GridStack.on(" + name + ') event not supported, but you can still use $(".grid-stack").on(...) while jquery-ui is still used internally.');
    }
    return this;
  }
  off(name) {
    if (name.indexOf(" ") !== -1) {
      let names = name.split(" ");
      names.forEach((name2) => this.off(name2));
      return this;
    }
    if (name === "change" || name === "added" || name === "removed" || name === "enable" || name === "disable") {
      if (this._gsEventHandler[name]) {
        this.el.removeEventListener(name, this._gsEventHandler[name]);
      }
    }
    delete this._gsEventHandler[name];
    return this;
  }
  offAll() {
    Object.keys(this._gsEventHandler).forEach((key) => this.off(key));
    return this;
  }
  removeWidget(els, removeDOM = true, triggerEvent = true) {
    GridStack.getElements(els).forEach((el) => {
      if (el.parentElement && el.parentElement !== this.el)
        return;
      let node = el.gridstackNode;
      if (!node) {
        node = this.engine.nodes.find((n) => el === n.el);
      }
      if (!node)
        return;
      if (GridStack.addRemoveCB) {
        GridStack.addRemoveCB(this.el, node, false, false);
      }
      delete el.gridstackNode;
      this._removeDD(el);
      this.engine.removeNode(node, removeDOM, triggerEvent);
      if (removeDOM && el.parentElement) {
        el.remove();
      }
    });
    if (triggerEvent) {
      this._triggerRemoveEvent();
      this._triggerChangeEvent();
    }
    return this;
  }
  removeAll(removeDOM = true) {
    this.engine.nodes.forEach((n) => {
      delete n.el.gridstackNode;
      this._removeDD(n.el);
    });
    this.engine.removeAll(removeDOM);
    this._triggerRemoveEvent();
    return this;
  }
  setAnimation(doAnimate) {
    if (doAnimate) {
      this.el.classList.add("grid-stack-animate");
    } else {
      this.el.classList.remove("grid-stack-animate");
    }
    return this;
  }
  setStatic(val, updateClass = true, recurse = true) {
    if (!!this.opts.staticGrid === val)
      return this;
    val ? this.opts.staticGrid = true : delete this.opts.staticGrid;
    this._setupRemoveDrop();
    this._setupAcceptWidget();
    this.engine.nodes.forEach((n) => {
      this._prepareDragDropByNode(n);
      if (n.subGrid && recurse)
        n.subGrid.setStatic(val, updateClass, recurse);
    });
    if (updateClass) {
      this._setStaticClass();
    }
    return this;
  }
  update(els, opt) {
    if (arguments.length > 2) {
      console.warn("gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon");
      let a = arguments, i = 1;
      opt = { x: a[i++], y: a[i++], w: a[i++], h: a[i++] };
      return this.update(els, opt);
    }
    GridStack.getElements(els).forEach((el) => {
      var _a;
      let n = el == null ? void 0 : el.gridstackNode;
      if (!n)
        return;
      let w = Utils.cloneDeep(opt);
      delete w.autoPosition;
      let keys = ["x", "y", "w", "h"];
      let m;
      if (keys.some((k) => w[k] !== void 0 && w[k] !== n[k])) {
        m = {};
        keys.forEach((k) => {
          m[k] = w[k] !== void 0 ? w[k] : n[k];
          delete w[k];
        });
      }
      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {
        m = {};
      }
      if (w.content !== void 0) {
        const itemContent = el.querySelector(".grid-stack-item-content");
        if (!itemContent || itemContent.innerHTML === w.content)
          return;
        itemContent.innerHTML = w.content;
        if ((_a = n.subGrid) == null ? void 0 : _a.el) {
          itemContent.appendChild(n.subGrid.el);
          if (!n.subGrid.opts.styleInHead)
            n.subGrid._updateStyles(true);
        }
        delete w.content;
      }
      let changed = false;
      let ddChanged = false;
      for (const key in w) {
        if (key[0] !== "_" && n[key] !== w[key]) {
          n[key] = w[key];
          changed = true;
          ddChanged = ddChanged || !this.opts.staticGrid && (key === "noResize" || key === "noMove" || key === "locked");
        }
      }
      Utils.sanitizeMinMax(n);
      if (m)
        this.moveNode(n, m);
      if (changed) {
        this._writeAttr(el, n);
      }
      if (ddChanged) {
        this._prepareDragDropByNode(n);
      }
    });
    return this;
  }
  moveNode(n, m) {
    this.engine.cleanNodes().beginUpdate(n).moveNode(n, m);
    this._updateContainerHeight();
    this._triggerChangeEvent();
    this.engine.endUpdate();
  }
  resizeToContent(els) {
    GridStack.getElements(els).forEach((el) => {
      let n = el == null ? void 0 : el.gridstackNode;
      if (!n)
        return;
      const grid = n.grid;
      if (grid !== this)
        return grid == null ? void 0 : grid.resizeToContent(el);
      if (el.parentElement !== this.el)
        return;
      const cell = this.getCellHeight();
      if (!cell)
        return;
      let height = n.h ? n.h * cell : el.clientHeight;
      if (!height)
        return;
      const item = el.querySelector(GridStack.resizeToContentParent);
      if (!item)
        return;
      const child = item.firstElementChild;
      if (!child) {
        console.log(`Error: resizeToContent() '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`);
        return;
      }
      const padding = el.clientHeight - item.clientHeight;
      const itemH = n.h ? n.h * cell - padding : item.clientHeight;
      const wantedH = child.getBoundingClientRect().height || itemH;
      if (itemH === wantedH)
        return;
      height += wantedH - itemH;
      let h = Math.ceil(height / cell);
      if (n.minH && h < n.minH)
        h = n.minH;
      else if (n.maxH && h > n.maxH)
        h = n.maxH;
      if (h !== n.h) {
        this._ignoreLayoutsNodeChange = true;
        this.moveNode(n, { h });
        delete this._ignoreLayoutsNodeChange;
      }
    });
  }
  resizeToContentCheck(el) {
    if (GridStack.resizeToContentCB)
      GridStack.resizeToContentCB(el);
    else
      this.resizeToContent(el);
  }
  margin(value) {
    let isMultiValue = typeof value === "string" && value.split(" ").length > 1;
    if (!isMultiValue) {
      let data = Utils.parseHeight(value);
      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h)
        return;
    }
    this.opts.margin = value;
    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = void 0;
    this._initMargin();
    this._updateStyles(true);
    return this;
  }
  getMargin() {
    return this.opts.margin;
  }
  willItFit(node) {
    if (arguments.length > 1) {
      console.warn("gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon");
      let a = arguments, i = 0, w = { x: a[i++], y: a[i++], w: a[i++], h: a[i++], autoPosition: a[i++] };
      return this.willItFit(w);
    }
    return this.engine.willItFit(node);
  }
  _triggerChangeEvent() {
    if (this.engine.batchMode)
      return this;
    let elements = this.engine.getDirtyNodes(true);
    if (elements && elements.length) {
      if (!this._ignoreLayoutsNodeChange) {
        this.engine.layoutsNodesChange(elements);
      }
      this._triggerEvent("change", elements);
    }
    this.engine.saveInitial();
    return this;
  }
  _triggerAddEvent() {
    var _a;
    if (this.engine.batchMode)
      return this;
    if ((_a = this.engine.addedNodes) == null ? void 0 : _a.length) {
      if (!this._ignoreLayoutsNodeChange) {
        this.engine.layoutsNodesChange(this.engine.addedNodes);
      }
      this.engine.addedNodes.forEach((n) => {
        delete n._dirty;
      });
      this._triggerEvent("added", this.engine.addedNodes);
      this.engine.addedNodes = [];
    }
    return this;
  }
  _triggerRemoveEvent() {
    var _a;
    if (this.engine.batchMode)
      return this;
    if ((_a = this.engine.removedNodes) == null ? void 0 : _a.length) {
      this._triggerEvent("removed", this.engine.removedNodes);
      this.engine.removedNodes = [];
    }
    return this;
  }
  _triggerEvent(type, data) {
    let event = data ? new CustomEvent(type, { bubbles: false, detail: data }) : new Event(type);
    this.el.dispatchEvent(event);
    return this;
  }
  _removeStylesheet() {
    if (this._styles) {
      Utils.removeStylesheet(this._styleSheetClass);
      delete this._styles;
    }
    return this;
  }
  _updateStyles(forceUpdate = false, maxH) {
    if (forceUpdate) {
      this._removeStylesheet();
    }
    if (!maxH)
      maxH = this.getRow();
    this._updateContainerHeight();
    if (this.opts.cellHeight === 0) {
      return this;
    }
    let cellHeight = this.opts.cellHeight;
    let cellHeightUnit = this.opts.cellHeightUnit;
    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;
    if (!this._styles) {
      let styleLocation = this.opts.styleInHead ? void 0 : this.el.parentNode;
      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {
        nonce: this.opts.nonce
      });
      if (!this._styles)
        return this;
      this._styles._max = 0;
      Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);
      let top = this.opts.marginTop + this.opts.marginUnit;
      let bottom = this.opts.marginBottom + this.opts.marginUnit;
      let right = this.opts.marginRight + this.opts.marginUnit;
      let left = this.opts.marginLeft + this.opts.marginUnit;
      let content = `${prefix} > .grid-stack-item-content`;
      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;
      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);
      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);
      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);
    }
    maxH = maxH || this._styles._max;
    if (maxH > this._styles._max) {
      let getHeight = (rows) => cellHeight * rows + cellHeightUnit;
      for (let i = this._styles._max + 1; i <= maxH; i++) {
        Utils.addCSSRule(this._styles, `${prefix}[gs-y="${i}"]`, `top: ${getHeight(i)}`);
        Utils.addCSSRule(this._styles, `${prefix}[gs-h="${i + 1}"]`, `height: ${getHeight(i + 1)}`);
      }
      this._styles._max = maxH;
    }
    return this;
  }
  _updateContainerHeight() {
    if (!this.engine || this.engine.batchMode)
      return this;
    let row = this.getRow() + this._extraDragRow;
    this.el.setAttribute("gs-current-row", String(row));
    if (row === 0) {
      this.el.style.removeProperty("min-height");
      return this;
    }
    let cellHeight = this.opts.cellHeight;
    let unit = this.opts.cellHeightUnit;
    if (!cellHeight)
      return this;
    this.el.style.minHeight = row * cellHeight + unit;
    return this;
  }
  _prepareElement(el, triggerAddEvent = false, node) {
    el.classList.add(this.opts.itemClass);
    node = node || this._readAttr(el);
    el.gridstackNode = node;
    node.el = el;
    node.grid = this;
    let copy = { ...node };
    node = this.engine.addNode(node, triggerAddEvent);
    if (!Utils.same(node, copy)) {
      this._writeAttr(el, node);
    }
    if (Utils.shouldFitToContent(node))
      el.classList.add("fit-to-content");
    this._prepareDragDropByNode(node);
    return this;
  }
  _writePosAttr(el, n) {
    if (n.x !== void 0 && n.x !== null) {
      el.setAttribute("gs-x", String(n.x));
    }
    if (n.y !== void 0 && n.y !== null) {
      el.setAttribute("gs-y", String(n.y));
    }
    n.w > 1 ? el.setAttribute("gs-w", String(n.w)) : el.removeAttribute("gs-w");
    n.h > 1 ? el.setAttribute("gs-h", String(n.h)) : el.removeAttribute("gs-h");
    return this;
  }
  _writeAttr(el, node) {
    if (!node)
      return this;
    this._writePosAttr(el, node);
    let attrs = {
      autoPosition: "gs-auto-position",
      noResize: "gs-no-resize",
      noMove: "gs-no-move",
      locked: "gs-locked",
      id: "gs-id"
    };
    for (const key in attrs) {
      if (node[key]) {
        el.setAttribute(attrs[key], String(node[key]));
      } else {
        el.removeAttribute(attrs[key]);
      }
    }
    return this;
  }
  _readAttr(el, clearDefaultAttr = true) {
    let n = {};
    n.x = Utils.toNumber(el.getAttribute("gs-x"));
    n.y = Utils.toNumber(el.getAttribute("gs-y"));
    n.w = Utils.toNumber(el.getAttribute("gs-w"));
    n.h = Utils.toNumber(el.getAttribute("gs-h"));
    n.autoPosition = Utils.toBool(el.getAttribute("gs-auto-position"));
    n.noResize = Utils.toBool(el.getAttribute("gs-no-resize"));
    n.noMove = Utils.toBool(el.getAttribute("gs-no-move"));
    n.locked = Utils.toBool(el.getAttribute("gs-locked"));
    n.id = el.getAttribute("gs-id");
    n.maxW = Utils.toNumber(el.getAttribute("gs-max-w"));
    n.minW = Utils.toNumber(el.getAttribute("gs-min-w"));
    n.maxH = Utils.toNumber(el.getAttribute("gs-max-h"));
    n.minH = Utils.toNumber(el.getAttribute("gs-min-h"));
    if (clearDefaultAttr) {
      if (n.w === 1)
        el.removeAttribute("gs-w");
      if (n.h === 1)
        el.removeAttribute("gs-h");
      if (n.maxW)
        el.removeAttribute("gs-max-w");
      if (n.minW)
        el.removeAttribute("gs-min-w");
      if (n.maxH)
        el.removeAttribute("gs-max-h");
      if (n.minH)
        el.removeAttribute("gs-min-h");
    }
    for (const key in n) {
      if (!n.hasOwnProperty(key))
        return;
      if (!n[key] && n[key] !== 0) {
        delete n[key];
      }
    }
    return n;
  }
  _setStaticClass() {
    let classes = ["grid-stack-static"];
    if (this.opts.staticGrid) {
      this.el.classList.add(...classes);
      this.el.setAttribute("gs-static", "true");
    } else {
      this.el.classList.remove(...classes);
      this.el.removeAttribute("gs-static");
    }
    return this;
  }
  onResize() {
    var _a;
    if (!((_a = this.el) == null ? void 0 : _a.clientWidth))
      return;
    if (this.prevWidth === this.el.clientWidth)
      return;
    this.prevWidth = this.el.clientWidth;
    this.batchUpdate();
    let columnChanged = false;
    if (this._autoColumn && this.parentGridItem) {
      if (this.opts.column !== this.parentGridItem.w) {
        this.column(this.parentGridItem.w, "none");
        columnChanged = true;
      }
    } else {
      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize || this.opts.column === 1 && !this._prevColumn;
      if (this.opts.column === 1 !== oneColumn) {
        this.column(oneColumn ? 1 : this._prevColumn);
        columnChanged = true;
      }
    }
    if (this._isAutoCellHeight)
      this.cellHeight();
    this.engine.nodes.forEach((n) => {
      if (n.subGrid)
        n.subGrid.onResize();
    });
    this.doContentResize(columnChanged);
    this.batchUpdate(false);
    return this;
  }
  doContentResize(delay = true, n = void 0) {
    setTimeout(() => {
      if (n) {
        if (Utils.shouldFitToContent(n))
          this.resizeToContentCheck(n.el);
      } else {
        const nodes = [...this.engine.nodes];
        this.batchUpdate();
        nodes.forEach((n2) => {
          if (Utils.shouldFitToContent(n2))
            this.resizeToContentCheck(n2.el);
        });
        this.batchUpdate(false);
      }
      if (this._gsEventHandler["resizecontent"])
        this._gsEventHandler["resizecontent"](null, n ? [n] : this.engine.nodes);
    }, delay ? 300 + 10 : 0);
  }
  _updateResizeEvent(forceRemove = false) {
    const trackSize = !this.parentGridItem && (this._isAutoCellHeight || this.opts.fitToContent || !this.opts.disableOneColumnMode || this.engine.nodes.find((n) => n.fitToContent));
    if (!forceRemove && trackSize && !this.resizeObserver) {
      this._sizeThrottle = Utils.throttle(() => this.onResize(), this.opts.cellHeightThrottle);
      this.resizeObserver = new ResizeObserver((entries) => this._sizeThrottle());
      this.resizeObserver.observe(this.el);
    } else if ((forceRemove || !trackSize) && this.resizeObserver) {
      this.resizeObserver.disconnect();
      delete this.resizeObserver;
      delete this._sizeThrottle;
    }
    return this;
  }
  static getElement(els = ".grid-stack-item") {
    return Utils.getElement(els);
  }
  static getElements(els = ".grid-stack-item") {
    return Utils.getElements(els);
  }
  static getGridElement(els) {
    return GridStack.getElement(els);
  }
  static getGridElements(els) {
    return Utils.getElements(els);
  }
  _initMargin() {
    let data;
    let margin = 0;
    let margins = [];
    if (typeof this.opts.margin === "string") {
      margins = this.opts.margin.split(" ");
    }
    if (margins.length === 2) {
      this.opts.marginTop = this.opts.marginBottom = margins[0];
      this.opts.marginLeft = this.opts.marginRight = margins[1];
    } else if (margins.length === 4) {
      this.opts.marginTop = margins[0];
      this.opts.marginRight = margins[1];
      this.opts.marginBottom = margins[2];
      this.opts.marginLeft = margins[3];
    } else {
      data = Utils.parseHeight(this.opts.margin);
      this.opts.marginUnit = data.unit;
      margin = this.opts.margin = data.h;
    }
    if (this.opts.marginTop === void 0) {
      this.opts.marginTop = margin;
    } else {
      data = Utils.parseHeight(this.opts.marginTop);
      this.opts.marginTop = data.h;
      delete this.opts.margin;
    }
    if (this.opts.marginBottom === void 0) {
      this.opts.marginBottom = margin;
    } else {
      data = Utils.parseHeight(this.opts.marginBottom);
      this.opts.marginBottom = data.h;
      delete this.opts.margin;
    }
    if (this.opts.marginRight === void 0) {
      this.opts.marginRight = margin;
    } else {
      data = Utils.parseHeight(this.opts.marginRight);
      this.opts.marginRight = data.h;
      delete this.opts.margin;
    }
    if (this.opts.marginLeft === void 0) {
      this.opts.marginLeft = margin;
    } else {
      data = Utils.parseHeight(this.opts.marginLeft);
      this.opts.marginLeft = data.h;
      delete this.opts.margin;
    }
    this.opts.marginUnit = data.unit;
    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {
      this.opts.margin = this.opts.marginTop;
    }
    return this;
  }
  static getDD() {
    return dd;
  }
  static setupDragIn(dragIn, dragInOptions, root = document) {
    if ((dragInOptions == null ? void 0 : dragInOptions.pause) !== void 0) {
      DDManager.pauseDrag = dragInOptions.pause;
    }
    dragInOptions = { ...dragInDefaultOptions, ...dragInOptions || {} };
    let els = typeof dragIn === "string" ? Utils.getElements(dragIn, root) : dragIn;
    if (els.length)
      els == null ? void 0 : els.forEach((el) => {
        if (!dd.isDraggable(el))
          dd.dragIn(el, dragInOptions);
      });
  }
  movable(els, val) {
    if (this.opts.staticGrid)
      return this;
    GridStack.getElements(els).forEach((el) => {
      let n = el.gridstackNode;
      if (!n)
        return;
      val ? delete n.noMove : n.noMove = true;
      this._prepareDragDropByNode(n);
    });
    return this;
  }
  resizable(els, val) {
    if (this.opts.staticGrid)
      return this;
    GridStack.getElements(els).forEach((el) => {
      let n = el.gridstackNode;
      if (!n)
        return;
      val ? delete n.noResize : n.noResize = true;
      this._prepareDragDropByNode(n);
    });
    return this;
  }
  disable(recurse = true) {
    if (this.opts.staticGrid)
      return;
    this.enableMove(false, recurse);
    this.enableResize(false, recurse);
    this._triggerEvent("disable");
    return this;
  }
  enable(recurse = true) {
    if (this.opts.staticGrid)
      return;
    this.enableMove(true, recurse);
    this.enableResize(true, recurse);
    this._triggerEvent("enable");
    return this;
  }
  enableMove(doEnable, recurse = true) {
    if (this.opts.staticGrid)
      return this;
    doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true;
    this.engine.nodes.forEach((n) => {
      this._prepareDragDropByNode(n);
      if (n.subGrid && recurse)
        n.subGrid.enableMove(doEnable, recurse);
    });
    return this;
  }
  enableResize(doEnable, recurse = true) {
    if (this.opts.staticGrid)
      return this;
    doEnable ? delete this.opts.disableResize : this.opts.disableResize = true;
    this.engine.nodes.forEach((n) => {
      this._prepareDragDropByNode(n);
      if (n.subGrid && recurse)
        n.subGrid.enableResize(doEnable, recurse);
    });
    return this;
  }
  _removeDD(el) {
    dd.draggable(el, "destroy").resizable(el, "destroy");
    if (el.gridstackNode) {
      delete el.gridstackNode._initDD;
    }
    delete el.ddElement;
    return this;
  }
  _setupAcceptWidget() {
    if (this.opts.staticGrid || !this.opts.acceptWidgets && !this.opts.removable) {
      dd.droppable(this.el, "destroy");
      return this;
    }
    let cellHeight, cellWidth;
    let onDrag = (event, el, helper) => {
      let node = el.gridstackNode;
      if (!node)
        return;
      helper = helper || el;
      let parent = this.el.getBoundingClientRect();
      let { top, left } = helper.getBoundingClientRect();
      left -= parent.left;
      top -= parent.top;
      let ui = { position: { top, left } };
      if (node._temporaryRemoved) {
        node.x = Math.max(0, Math.round(left / cellWidth));
        node.y = Math.max(0, Math.round(top / cellHeight));
        delete node.autoPosition;
        this.engine.nodeBoundFix(node);
        if (!this.engine.willItFit(node)) {
          node.autoPosition = true;
          if (!this.engine.willItFit(node)) {
            dd.off(el, "drag");
            return;
          }
          if (node._willFitPos) {
            Utils.copyPos(node, node._willFitPos);
            delete node._willFitPos;
          }
        }
        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);
      } else {
        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);
      }
    };
    dd.droppable(this.el, {
      accept: (el) => {
        let node = el.gridstackNode;
        if ((node == null ? void 0 : node.grid) === this)
          return true;
        if (!this.opts.acceptWidgets)
          return false;
        let canAccept = true;
        if (typeof this.opts.acceptWidgets === "function") {
          canAccept = this.opts.acceptWidgets(el);
        } else {
          let selector = this.opts.acceptWidgets === true ? ".grid-stack-item" : this.opts.acceptWidgets;
          canAccept = el.matches(selector);
        }
        if (canAccept && node && this.opts.maxRow) {
          let n = { w: node.w, h: node.h, minW: node.minW, minH: node.minH };
          canAccept = this.engine.willItFit(n);
        }
        return canAccept;
      }
    }).on(this.el, "dropover", (event, el, helper) => {
      let node = el.gridstackNode;
      if ((node == null ? void 0 : node.grid) === this && !node._temporaryRemoved) {
        return false;
      }
      if ((node == null ? void 0 : node.grid) && node.grid !== this && !node._temporaryRemoved) {
        let otherGrid = node.grid;
        otherGrid._leave(el, helper);
      }
      cellWidth = this.cellWidth();
      cellHeight = this.getCellHeight(true);
      if (!node) {
        node = this._readAttr(el, false);
      }
      if (!node.grid) {
        node._isExternal = true;
        el.gridstackNode = node;
      }
      helper = helper || el;
      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;
      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;
      if (node.grid && node.grid !== this) {
        if (!el._gridstackNodeOrig)
          el._gridstackNodeOrig = node;
        el.gridstackNode = node = { ...node, w, h, grid: this };
        this.engine.cleanupNode(node).nodeBoundFix(node);
        node._initDD = node._isExternal = node._temporaryRemoved = true;
      } else {
        node.w = w;
        node.h = h;
        node._temporaryRemoved = true;
      }
      this._itemRemoving(node.el, false);
      dd.on(el, "drag", onDrag);
      onDrag(event, el, helper);
      return false;
    }).on(this.el, "dropout", (event, el, helper) => {
      let node = el.gridstackNode;
      if (!node)
        return false;
      if (!node.grid || node.grid === this) {
        this._leave(el, helper);
        if (this._isTemp) {
          this.removeAsSubGrid(node);
        }
      }
      return false;
    }).on(this.el, "drop", (event, el, helper) => {
      var _a, _b;
      let node = el.gridstackNode;
      if ((node == null ? void 0 : node.grid) === this && !node._isExternal)
        return false;
      let wasAdded = !!this.placeholder.parentElement;
      this.placeholder.remove();
      let origNode = el._gridstackNodeOrig;
      delete el._gridstackNodeOrig;
      if (wasAdded && (origNode == null ? void 0 : origNode.grid) && origNode.grid !== this) {
        let oGrid = origNode.grid;
        oGrid.engine.removedNodes.push(origNode);
        oGrid._triggerRemoveEvent()._triggerChangeEvent();
        if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {
          oGrid.removeAsSubGrid();
        }
      }
      if (!node)
        return false;
      if (wasAdded) {
        this.engine.cleanupNode(node);
        node.grid = this;
      }
      dd.off(el, "drag");
      if (helper !== el) {
        helper.remove();
        el.gridstackNode = origNode;
        if (wasAdded) {
          el = el.cloneNode(true);
        }
      } else {
        el.remove();
        this._removeDD(el);
      }
      if (!wasAdded)
        return false;
      el.gridstackNode = node;
      node.el = el;
      let subGrid = (_b = (_a = node.subGrid) == null ? void 0 : _a.el) == null ? void 0 : _b.gridstack;
      Utils.copyPos(node, this._readAttr(this.placeholder));
      Utils.removePositioningStyles(el);
      this._writeAttr(el, node);
      el.classList.add(gridDefaults.itemClass, this.opts.itemClass);
      this.el.appendChild(el);
      if (subGrid) {
        subGrid.parentGridItem = node;
        if (!subGrid.opts.styleInHead)
          subGrid._updateStyles(true);
      }
      this._updateContainerHeight();
      this.engine.addedNodes.push(node);
      this._triggerAddEvent();
      this._triggerChangeEvent();
      this.engine.endUpdate();
      if (this._gsEventHandler["dropped"]) {
        this._gsEventHandler["dropped"]({ ...event, type: "dropped" }, origNode && origNode.grid ? origNode : void 0, node);
      }
      window.setTimeout(() => {
        if (node.el && node.el.parentElement) {
          this._prepareDragDropByNode(node);
        } else {
          this.engine.removeNode(node);
        }
        delete node.grid._isTemp;
      });
      return false;
    });
    return this;
  }
  _itemRemoving(el, remove) {
    let node = el ? el.gridstackNode : void 0;
    if (!node || !node.grid || el.classList.contains(this.opts.removableOptions.decline))
      return;
    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;
    remove ? el.classList.add("grid-stack-item-removing") : el.classList.remove("grid-stack-item-removing");
  }
  _setupRemoveDrop() {
    if (!this.opts.staticGrid && typeof this.opts.removable === "string") {
      let trashEl = document.querySelector(this.opts.removable);
      if (!trashEl)
        return this;
      if (!dd.isDroppable(trashEl)) {
        dd.droppable(trashEl, this.opts.removableOptions).on(trashEl, "dropover", (event, el) => this._itemRemoving(el, true)).on(trashEl, "dropout", (event, el) => this._itemRemoving(el, false));
      }
    }
    return this;
  }
  _prepareDragDropByNode(node) {
    let el = node.el;
    const noMove = node.noMove || this.opts.disableDrag;
    const noResize = node.noResize || this.opts.disableResize;
    if (this.opts.staticGrid || noMove && noResize) {
      if (node._initDD) {
        this._removeDD(el);
        delete node._initDD;
      }
      el.classList.add("ui-draggable-disabled", "ui-resizable-disabled");
      return this;
    }
    if (!node._initDD) {
      let cellWidth;
      let cellHeight;
      let onStartMoving = (event, ui) => {
        if (this._gsEventHandler[event.type]) {
          this._gsEventHandler[event.type](event, event.target);
        }
        cellWidth = this.cellWidth();
        cellHeight = this.getCellHeight(true);
        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);
      };
      let dragOrResize = (event, ui) => {
        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);
      };
      let onEndMoving = (event) => {
        this.placeholder.remove();
        delete node._moving;
        delete node._event;
        delete node._lastTried;
        let target = event.target;
        if (!target.gridstackNode || target.gridstackNode.grid !== this)
          return;
        node.el = target;
        if (node._isAboutToRemove) {
          let grid = el.gridstackNode.grid;
          if (grid._gsEventHandler[event.type]) {
            grid._gsEventHandler[event.type](event, target);
          }
          grid.engine.nodes.push(node);
          grid.removeWidget(el, true, true);
        } else {
          Utils.removePositioningStyles(target);
          if (node._temporaryRemoved) {
            Utils.copyPos(node, node._orig);
            this._writePosAttr(target, node);
            this.engine.addNode(node);
          } else {
            this._writePosAttr(target, node);
          }
          if (this._gsEventHandler[event.type]) {
            this._gsEventHandler[event.type](event, target);
          }
        }
        this._extraDragRow = 0;
        this._updateContainerHeight();
        this._triggerChangeEvent();
        this.engine.endUpdate();
        if (event.type === "resizestop")
          this.doContentResize(false, node);
      };
      dd.draggable(el, {
        start: onStartMoving,
        stop: onEndMoving,
        drag: dragOrResize
      }).resizable(el, {
        start: onStartMoving,
        stop: onEndMoving,
        resize: dragOrResize
      });
      node._initDD = true;
    }
    dd.draggable(el, noMove ? "disable" : "enable").resizable(el, noResize ? "disable" : "enable");
    return this;
  }
  _onStartMoving(el, event, ui, node, cellWidth, cellHeight) {
    this.engine.cleanNodes().beginUpdate(node);
    this._writePosAttr(this.placeholder, node);
    this.el.appendChild(this.placeholder);
    node.el = this.placeholder;
    node._lastUiPosition = ui.position;
    node._prevYPix = ui.position.top;
    node._moving = event.type === "dragstart";
    delete node._lastTried;
    if (event.type === "dropover" && node._temporaryRemoved) {
      this.engine.addNode(node);
      node._moving = true;
    }
    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop, this.opts.marginRight, this.opts.marginBottom, this.opts.marginLeft);
    if (event.type === "resizestart") {
      dd.resizable(el, "option", "minWidth", cellWidth * (node.minW || 1)).resizable(el, "option", "minHeight", cellHeight * (node.minH || 1));
      if (node.maxW) {
        dd.resizable(el, "option", "maxWidth", cellWidth * node.maxW);
      }
      if (node.maxH) {
        dd.resizable(el, "option", "maxHeight", cellHeight * node.maxH);
      }
    }
  }
  _dragOrResize(el, event, ui, node, cellWidth, cellHeight) {
    let p = { ...node._orig };
    let resizing;
    let mLeft = this.opts.marginLeft, mRight = this.opts.marginRight, mTop = this.opts.marginTop, mBottom = this.opts.marginBottom;
    let mHeight = Math.round(cellHeight * 0.1), mWidth = Math.round(cellWidth * 0.1);
    mLeft = Math.min(mLeft, mWidth);
    mRight = Math.min(mRight, mWidth);
    mTop = Math.min(mTop, mHeight);
    mBottom = Math.min(mBottom, mHeight);
    if (event.type === "drag") {
      if (node._temporaryRemoved)
        return;
      let distance = ui.position.top - node._prevYPix;
      node._prevYPix = ui.position.top;
      if (this.opts.draggable.scroll !== false) {
        Utils.updateScrollPosition(el, ui.position, distance);
      }
      let left = ui.position.left + (ui.position.left > node._lastUiPosition.left ? -mRight : mLeft);
      let top = ui.position.top + (ui.position.top > node._lastUiPosition.top ? -mBottom : mTop);
      p.x = Math.round(left / cellWidth);
      p.y = Math.round(top / cellHeight);
      let prev = this._extraDragRow;
      if (this.engine.collide(node, p)) {
        let row = this.getRow();
        let extra = Math.max(0, p.y + node.h - row);
        if (this.opts.maxRow && row + extra > this.opts.maxRow) {
          extra = Math.max(0, this.opts.maxRow - row);
        }
        this._extraDragRow = extra;
      } else
        this._extraDragRow = 0;
      if (this._extraDragRow !== prev)
        this._updateContainerHeight();
      if (node.x === p.x && node.y === p.y)
        return;
    } else if (event.type === "resize") {
      if (p.x < 0)
        return;
      Utils.updateScrollResize(event, el, cellHeight);
      p.w = Math.round((ui.size.width - mLeft) / cellWidth);
      p.h = Math.round((ui.size.height - mTop) / cellHeight);
      if (node.w === p.w && node.h === p.h)
        return;
      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h)
        return;
      let left = ui.position.left + mLeft;
      let top = ui.position.top + mTop;
      p.x = Math.round(left / cellWidth);
      p.y = Math.round(top / cellHeight);
      resizing = true;
    }
    node._event = event;
    node._lastTried = p;
    let rect = {
      x: ui.position.left + mLeft,
      y: ui.position.top + mTop,
      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,
      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom
    };
    if (this.engine.moveNodeCheck(node, { ...p, cellWidth, cellHeight, rect, resizing })) {
      node._lastUiPosition = ui.position;
      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);
      delete node._skipDown;
      if (resizing && node.subGrid)
        node.subGrid.onResize();
      this._extraDragRow = 0;
      this._updateContainerHeight();
      let target = event.target;
      this._writePosAttr(target, node);
      if (this._gsEventHandler[event.type]) {
        this._gsEventHandler[event.type](event, target);
      }
    }
  }
  _leave(el, helper) {
    let node = el.gridstackNode;
    if (!node)
      return;
    dd.off(el, "drag");
    if (node._temporaryRemoved)
      return;
    node._temporaryRemoved = true;
    this.engine.removeNode(node);
    node.el = node._isExternal && helper ? helper : el;
    if (this.opts.removable === true) {
      this._itemRemoving(el, true);
    }
    if (el._gridstackNodeOrig) {
      el.gridstackNode = el._gridstackNodeOrig;
      delete el._gridstackNodeOrig;
    } else if (node._isExternal) {
      delete node.el;
      delete el.gridstackNode;
      this.engine.restoreInitial();
    }
  }
  commit() {
    obsolete(this, this.batchUpdate(false), "commit", "batchUpdate", "5.2");
    return this;
  }
};
GridStack.resizeToContentParent = ".grid-stack-item-content";
GridStack.Utils = Utils;
GridStack.Engine = GridStackEngine;
GridStack.GDRev = "9.0.2";
export {
  DDGridStack,
  GridStack,
  GridStackEngine,
  Utils,
  dragInDefaultOptions,
  gridDefaults,
  obsolete,
  obsoleteAttr,
  obsoleteOpts,
  obsoleteOptsDel
};
/*!
 * GridStack 9.0.2
 * https://gridstackjs.com/
 *
 * Copyright (c) 2021-2022 Alain Dumesny
 * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE
 */
//# sourceMappingURL=gridstack.js.map
