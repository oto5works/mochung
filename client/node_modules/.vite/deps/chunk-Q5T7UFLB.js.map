{
  "version": 3,
  "sources": ["../../vuetify/src/directives/intersect/index.ts", "../../vuetify/src/directives/touch/index.ts"],
  "sourcesContent": ["// Utilities\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\n// Types\nimport type {\n  DirectiveBinding,\n} from 'vue'\n\ntype ObserveHandler = (\n  isIntersecting: boolean,\n  entries: IntersectionObserverEntry[],\n  observer: IntersectionObserver,\n) => void\n\nexport interface ObserveDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value?: ObserveHandler | { handler: ObserveHandler, options?: IntersectionObserverInit }\n  modifiers: {\n    once?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  if (!SUPPORTS_INTERSECTION) return\n\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : { handler: value, options: {} }\n\n  const observer = new IntersectionObserver((\n    entries: IntersectionObserverEntry[] = [],\n    observer: IntersectionObserver\n  ) => {\n    const _observe = el._observe?.[binding.instance!.$.uid]\n    if (!_observe) return // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting)\n\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n    if (\n      handler && (\n        !modifiers.quiet ||\n        _observe.init\n      ) && (\n        !modifiers.once ||\n        isIntersecting ||\n        _observe.init\n      )\n    ) {\n      handler(isIntersecting, entries, observer)\n    }\n\n    if (isIntersecting && modifiers.once) unmounted(el, binding)\n    else _observe.init = true\n  }, options)\n\n  el._observe = Object(el._observe)\n  el._observe![binding.instance!.$.uid] = { init: false, observer }\n\n  observer.observe(el)\n}\n\nfunction unmounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  const observe = el._observe?.[binding.instance!.$.uid]\n  if (!observe) return\n\n  observe.observer.unobserve(el)\n  delete el._observe![binding.instance!.$.uid]\n}\n\nexport const Intersect = {\n  mounted,\n  unmounted,\n}\n\nexport default Intersect\n", "// Utilities\nimport { keys } from '@/util'\n\n// Types\nimport type {\n  DirectiveBinding,\n} from 'vue'\n\nexport interface TouchHandlers {\n  start?: (wrapperEvent: { originalEvent: TouchEvent } & TouchData) => void\n  end?: (wrapperEvent: { originalEvent: TouchEvent } & TouchData) => void\n  move?: (wrapperEvent: { originalEvent: TouchEvent } & TouchData) => void\n  left?: (wrapper: TouchData) => void\n  right?: (wrapper: TouchData) => void\n  up?: (wrapper: TouchData) => void\n  down?: (wrapper: TouchData) => void\n}\n\nexport interface TouchData {\n  touchstartX: number\n  touchstartY: number\n  touchmoveX: number\n  touchmoveY: number\n  touchendX: number\n  touchendY: number\n  offsetX: number\n  offsetY: number\n}\n\nexport type TouchWrapper = TouchHandlers & TouchData\n\nexport interface TouchValue extends TouchHandlers {\n  parent?: boolean\n  options?: AddEventListenerOptions\n}\n\nexport interface TouchStoredHandlers {\n  touchstart: (e: TouchEvent) => void\n  touchend: (e: TouchEvent) => void\n  touchmove: (e: TouchEvent) => void\n}\n\nexport interface TouchDirectiveBinding extends Omit<DirectiveBinding, 'value'> {\n  value?: TouchValue\n}\n\nconst handleGesture = (wrapper: TouchWrapper) => {\n  const { touchstartX, touchendX, touchstartY, touchendY } = wrapper\n  const dirRatio = 0.5\n  const minDistance = 16\n  wrapper.offsetX = touchendX - touchstartX\n  wrapper.offsetY = touchendY - touchstartY\n\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && (touchendX < touchstartX - minDistance) && wrapper.left(wrapper)\n    wrapper.right && (touchendX > touchstartX + minDistance) && wrapper.right(wrapper)\n  }\n\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && (touchendY < touchstartY - minDistance) && wrapper.up(wrapper)\n    wrapper.down && (touchendY > touchstartY + minDistance) && wrapper.down(wrapper)\n  }\n}\n\nfunction touchstart (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchstartX = touch.clientX\n  wrapper.touchstartY = touch.clientY\n\n  wrapper.start?.({ originalEvent: event, ...wrapper })\n}\n\nfunction touchend (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchendX = touch.clientX\n  wrapper.touchendY = touch.clientY\n\n  wrapper.end?.({ originalEvent: event, ...wrapper })\n\n  handleGesture(wrapper)\n}\n\nfunction touchmove (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchmoveX = touch.clientX\n  wrapper.touchmoveY = touch.clientY\n\n  wrapper.move?.({ originalEvent: event, ...wrapper })\n}\n\nfunction createHandlers (value: TouchHandlers = {}): TouchStoredHandlers {\n  const wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end,\n  }\n\n  return {\n    touchstart: (e: TouchEvent) => touchstart(e, wrapper),\n    touchend: (e: TouchEvent) => touchend(e, wrapper),\n    touchmove: (e: TouchEvent) => touchmove(e, wrapper),\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const value = binding.value\n  const target = value?.parent ? el.parentElement : el\n  const options = value?.options ?? { passive: true }\n  const uid = binding.instance?.$.uid // TODO: use custom uid generator\n\n  if (!target || !uid) return\n\n  const handlers = createHandlers(binding.value)\n\n  target._touchHandlers = target._touchHandlers ?? Object.create(null)\n  target._touchHandlers![uid] = handlers\n\n  keys(handlers).forEach(eventName => {\n    target.addEventListener(eventName, handlers[eventName], options)\n  })\n}\n\nfunction unmounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const target = binding.value?.parent ? el.parentElement : el\n  const uid = binding.instance?.$.uid\n\n  if (!target?._touchHandlers || !uid) return\n\n  const handlers = target._touchHandlers[uid]\n\n  keys(handlers).forEach(eventName => {\n    target.removeEventListener(eventName, handlers[eventName])\n  })\n\n  delete target._touchHandlers[uid]\n}\n\nexport const Touch = {\n  mounted,\n  unmounted,\n}\n\nexport default Touch\n"],
  "mappings": "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",
  "names": ["mounted", "el", "binding", "SUPPORTS_INTERSECTION", "modifiers", "value", "handler", "options", "observer", "IntersectionObserver", "entries", "arguments", "length", "undefined", "_observe", "instance", "$", "uid", "isIntersecting", "some", "entry", "quiet", "init", "once", "unmounted", "Object", "observe", "unobserve", "Intersect", "handleGesture", "wrapper", "touchstartX", "touchendX", "touchstartY", "touchendY", "dirRatio", "minDistance", "offsetX", "offsetY", "Math", "abs", "left", "right", "up", "down", "touchstart", "event", "touch", "changedTouches", "clientX", "clientY", "start", "originalEvent", "touchend", "end", "touchmove", "touchmoveX", "touchmoveY", "move", "createHandlers", "value", "arguments", "length", "undefined", "e", "mounted", "el", "binding", "target", "parent", "parentElement", "options", "passive", "uid", "instance", "$", "handlers", "_touchHandlers", "Object", "create", "keys", "forEach", "eventName", "addEventListener", "unmounted", "removeEventListener", "Touch"]
}
